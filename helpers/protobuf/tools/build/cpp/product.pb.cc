// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "product.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ts {

namespace {

const ::google::protobuf::Descriptor* ProductParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_product_2eproto() {
  protobuf_AddDesc_product_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "product.proto");
  GOOGLE_CHECK(file != NULL);
  ProductParam_descriptor_ = file->message_type(0);
  static const int ProductParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductParam, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductParam, value_),
  };
  ProductParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductParam_descriptor_,
      ProductParam::default_instance_,
      ProductParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductParam));
  ProductInfo_descriptor_ = file->message_type(1);
  static const int ProductInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, producttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, mchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, productprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, productnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, producttmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, productparamlist_),
  };
  ProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductInfo_descriptor_,
      ProductInfo::default_instance_,
      ProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_product_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductParam_descriptor_, &ProductParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductInfo_descriptor_, &ProductInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_product_2eproto() {
  delete ProductParam::default_instance_;
  delete ProductParam_reflection_;
  delete ProductInfo::default_instance_;
  delete ProductInfo_reflection_;
}

void protobuf_AddDesc_product_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rproduct.proto\022\002ts\"*\n\014ProductParam\022\013\n\003k"
    "ey\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\317\001\n\013ProductInfo\022"
    "\020\n\010playerid\030\001 \002(\t\022\021\n\tproductid\030\002 \002(\t\022\023\n\013"
    "producttype\030\003 \001(\t\022\r\n\005mchid\030\004 \001(\t\022\013\n\003key\030"
    "\005 \001(\t\022\024\n\014productprice\030\006 \001(\001\022\022\n\nproductnu"
    "m\030\007 \001(\005\022\024\n\014producttmpid\030\010 \001(\005\022*\n\020product"
    "paramlist\030\t \003(\0132\020.ts.ProductParam", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "product.proto", &protobuf_RegisterTypes);
  ProductParam::default_instance_ = new ProductParam();
  ProductInfo::default_instance_ = new ProductInfo();
  ProductParam::default_instance_->InitAsDefaultInstance();
  ProductInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_product_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_product_2eproto {
  StaticDescriptorInitializer_product_2eproto() {
    protobuf_AddDesc_product_2eproto();
  }
} static_descriptor_initializer_product_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProductParam::kKeyFieldNumber;
const int ProductParam::kValueFieldNumber;
#endif  // !_MSC_VER

ProductParam::ProductParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductParam::InitAsDefaultInstance() {
}

ProductParam::ProductParam(const ProductParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductParam::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductParam::~ProductParam() {
  SharedDtor();
}

void ProductParam::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ProductParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductParam_descriptor_;
}

const ProductParam& ProductParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_product_2eproto();
  return *default_instance_;
}

ProductParam* ProductParam::default_instance_ = NULL;

ProductParam* ProductParam::New() const {
  return new ProductParam;
}

void ProductParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductParam::MergeFrom(const ProductParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductParam::CopyFrom(const ProductParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProductParam::Swap(ProductParam* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductParam_descriptor_;
  metadata.reflection = ProductParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductInfo::kPlayeridFieldNumber;
const int ProductInfo::kProductidFieldNumber;
const int ProductInfo::kProducttypeFieldNumber;
const int ProductInfo::kMchidFieldNumber;
const int ProductInfo::kKeyFieldNumber;
const int ProductInfo::kProductpriceFieldNumber;
const int ProductInfo::kProductnumFieldNumber;
const int ProductInfo::kProducttmpidFieldNumber;
const int ProductInfo::kProductparamlistFieldNumber;
#endif  // !_MSC_VER

ProductInfo::ProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductInfo::InitAsDefaultInstance() {
}

ProductInfo::ProductInfo(const ProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productprice_ = 0;
  productnum_ = 0;
  producttmpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductInfo::~ProductInfo() {
  SharedDtor();
}

void ProductInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (producttype_ != &::google::protobuf::internal::kEmptyString) {
    delete producttype_;
  }
  if (mchid_ != &::google::protobuf::internal::kEmptyString) {
    delete mchid_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductInfo_descriptor_;
}

const ProductInfo& ProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_product_2eproto();
  return *default_instance_;
}

ProductInfo* ProductInfo::default_instance_ = NULL;

ProductInfo* ProductInfo::New() const {
  return new ProductInfo;
}

void ProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    if (has_producttype()) {
      if (producttype_ != &::google::protobuf::internal::kEmptyString) {
        producttype_->clear();
      }
    }
    if (has_mchid()) {
      if (mchid_ != &::google::protobuf::internal::kEmptyString) {
        mchid_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    productprice_ = 0;
    productnum_ = 0;
    producttmpid_ = 0;
  }
  productparamlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productid;
        break;
      }

      // required string productid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_producttype;
        break;
      }

      // optional string producttype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_producttype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producttype().data(), this->producttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mchid;
        break;
      }

      // optional string mchid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mchid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mchid().data(), this->mchid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // optional string key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_productprice;
        break;
      }

      // optional double productprice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_productprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &productprice_)));
          set_has_productprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_productnum;
        break;
      }

      // optional int32 productnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productnum_)));
          set_has_productnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_producttmpid;
        break;
      }

      // optional int32 producttmpid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_producttmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &producttmpid_)));
          set_has_producttmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_productparamlist;
        break;
      }

      // repeated .ts.ProductParam productparamlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productparamlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_productparamlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_productparamlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }

  // required string productid = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->productid(), output);
  }

  // optional string producttype = 3;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->producttype(), output);
  }

  // optional string mchid = 4;
  if (has_mchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mchid().data(), this->mchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mchid(), output);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->key(), output);
  }

  // optional double productprice = 6;
  if (has_productprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->productprice(), output);
  }

  // optional int32 productnum = 7;
  if (has_productnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->productnum(), output);
  }

  // optional int32 producttmpid = 8;
  if (has_producttmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->producttmpid(), output);
  }

  // repeated .ts.ProductParam productparamlist = 9;
  for (int i = 0; i < this->productparamlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->productparamlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }

  // required string productid = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // optional string producttype = 3;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->producttype(), target);
  }

  // optional string mchid = 4;
  if (has_mchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mchid().data(), this->mchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mchid(), target);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key(), target);
  }

  // optional double productprice = 6;
  if (has_productprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->productprice(), target);
  }

  // optional int32 productnum = 7;
  if (has_productnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->productnum(), target);
  }

  // optional int32 producttmpid = 8;
  if (has_producttmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->producttmpid(), target);
  }

  // repeated .ts.ProductParam productparamlist = 9;
  for (int i = 0; i < this->productparamlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->productparamlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // required string productid = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string producttype = 3;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producttype());
    }

    // optional string mchid = 4;
    if (has_mchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mchid());
    }

    // optional string key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional double productprice = 6;
    if (has_productprice()) {
      total_size += 1 + 8;
    }

    // optional int32 productnum = 7;
    if (has_productnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productnum());
    }

    // optional int32 producttmpid = 8;
    if (has_producttmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->producttmpid());
    }

  }
  // repeated .ts.ProductParam productparamlist = 9;
  total_size += 1 * this->productparamlist_size();
  for (int i = 0; i < this->productparamlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->productparamlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductInfo::MergeFrom(const ProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  productparamlist_.MergeFrom(from.productparamlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_mchid()) {
      set_mchid(from.mchid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_productprice()) {
      set_productprice(from.productprice());
    }
    if (from.has_productnum()) {
      set_productnum(from.productnum());
    }
    if (from.has_producttmpid()) {
      set_producttmpid(from.producttmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInfo::CopyFrom(const ProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < productparamlist_size(); i++) {
    if (!this->productparamlist(i).IsInitialized()) return false;
  }
  return true;
}

void ProductInfo::Swap(ProductInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(productid_, other->productid_);
    std::swap(producttype_, other->producttype_);
    std::swap(mchid_, other->mchid_);
    std::swap(key_, other->key_);
    std::swap(productprice_, other->productprice_);
    std::swap(productnum_, other->productnum_);
    std::swap(producttmpid_, other->producttmpid_);
    productparamlist_.Swap(&other->productparamlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductInfo_descriptor_;
  metadata.reflection = ProductInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

// @@protoc_insertion_point(global_scope)

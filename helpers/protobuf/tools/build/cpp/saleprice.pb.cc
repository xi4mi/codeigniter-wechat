// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: saleprice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "saleprice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ts {

namespace {

const ::google::protobuf::Descriptor* SalePrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SalePrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* SalePriceAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SalePriceAns_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_saleprice_2eproto() {
  protobuf_AddDesc_saleprice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "saleprice.proto");
  GOOGLE_CHECK(file != NULL);
  SalePrice_descriptor_ = file->message_type(0);
  static const int SalePrice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, payinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, client_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, profitinfo_),
  };
  SalePrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SalePrice_descriptor_,
      SalePrice::default_instance_,
      SalePrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SalePrice));
  SalePriceAns_descriptor_ = file->message_type(1);
  static const int SalePriceAns_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePriceAns, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePriceAns, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePriceAns, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePriceAns, payinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePriceAns, profitinfo_),
  };
  SalePriceAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SalePriceAns_descriptor_,
      SalePriceAns::default_instance_,
      SalePriceAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePriceAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePriceAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SalePriceAns));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_saleprice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SalePrice_descriptor_, &SalePrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SalePriceAns_descriptor_, &SalePriceAns::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_saleprice_2eproto() {
  delete SalePrice::default_instance_;
  delete SalePrice_reflection_;
  delete SalePriceAns::default_instance_;
  delete SalePriceAns_reflection_;
}

void protobuf_AddDesc_saleprice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ts::protobuf_AddDesc_head_2eproto();
  ::ts::protobuf_AddDesc_client_2eproto();
  ::ts::protobuf_AddDesc_product_2eproto();
  ::ts::protobuf_AddDesc_pay_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017saleprice.proto\022\002ts\032\nhead.proto\032\014clien"
    "t.proto\032\rproduct.proto\032\tpay.proto\"\323\001\n\tSa"
    "lePrice\022\035\n\004head\030\001 \002(\0132\017.ts.ServiceHead\022\036"
    "\n\006client\030\002 \002(\0132\016.ts.ClientInfo\022 \n\007produc"
    "t\030\003 \002(\0132\017.ts.ProductInfo\022\034\n\007payinfo\030\004 \001("
    "\0132\013.ts.PayInfo\022#\n\013client_list\030\005 \003(\0132\016.ts"
    ".ClientInfo\022\"\n\nprofitinfo\030\006 \001(\0132\016.ts.Pro"
    "fitInfo\"\261\001\n\014SalePriceAns\022\035\n\004head\030\001 \002(\0132\017"
    ".ts.ServiceHead\022\036\n\006client\030\002 \001(\0132\016.ts.Cli"
    "entInfo\022 \n\007product\030\003 \001(\0132\017.ts.ProductInf"
    "o\022\034\n\007payinfo\030\004 \001(\0132\013.ts.PayInfo\022\"\n\nprofi"
    "tinfo\030\005 \001(\0132\016.ts.ProfitInfo", 467);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "saleprice.proto", &protobuf_RegisterTypes);
  SalePrice::default_instance_ = new SalePrice();
  SalePriceAns::default_instance_ = new SalePriceAns();
  SalePrice::default_instance_->InitAsDefaultInstance();
  SalePriceAns::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_saleprice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_saleprice_2eproto {
  StaticDescriptorInitializer_saleprice_2eproto() {
    protobuf_AddDesc_saleprice_2eproto();
  }
} static_descriptor_initializer_saleprice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SalePrice::kHeadFieldNumber;
const int SalePrice::kClientFieldNumber;
const int SalePrice::kProductFieldNumber;
const int SalePrice::kPayinfoFieldNumber;
const int SalePrice::kClientListFieldNumber;
const int SalePrice::kProfitinfoFieldNumber;
#endif  // !_MSC_VER

SalePrice::SalePrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SalePrice::InitAsDefaultInstance() {
  head_ = const_cast< ::ts::ServiceHead*>(&::ts::ServiceHead::default_instance());
  client_ = const_cast< ::ts::ClientInfo*>(&::ts::ClientInfo::default_instance());
  product_ = const_cast< ::ts::ProductInfo*>(&::ts::ProductInfo::default_instance());
  payinfo_ = const_cast< ::ts::PayInfo*>(&::ts::PayInfo::default_instance());
  profitinfo_ = const_cast< ::ts::ProfitInfo*>(&::ts::ProfitInfo::default_instance());
}

SalePrice::SalePrice(const SalePrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SalePrice::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  client_ = NULL;
  product_ = NULL;
  payinfo_ = NULL;
  profitinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SalePrice::~SalePrice() {
  SharedDtor();
}

void SalePrice::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete client_;
    delete product_;
    delete payinfo_;
    delete profitinfo_;
  }
}

void SalePrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SalePrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SalePrice_descriptor_;
}

const SalePrice& SalePrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_saleprice_2eproto();
  return *default_instance_;
}

SalePrice* SalePrice::default_instance_ = NULL;

SalePrice* SalePrice::New() const {
  return new SalePrice;
}

void SalePrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ts::ServiceHead::Clear();
    }
    if (has_client()) {
      if (client_ != NULL) client_->::ts::ClientInfo::Clear();
    }
    if (has_product()) {
      if (product_ != NULL) product_->::ts::ProductInfo::Clear();
    }
    if (has_payinfo()) {
      if (payinfo_ != NULL) payinfo_->::ts::PayInfo::Clear();
    }
    if (has_profitinfo()) {
      if (profitinfo_ != NULL) profitinfo_->::ts::ProfitInfo::Clear();
    }
  }
  client_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SalePrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ts.ServiceHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // required .ts.ClientInfo client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_product;
        break;
      }

      // required .ts.ProductInfo product = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payinfo;
        break;
      }

      // optional .ts.PayInfo payinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_client_list;
        break;
      }

      // repeated .ts.ClientInfo client_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_client_list;
        if (input->ExpectTag(50)) goto parse_profitinfo;
        break;
      }

      // optional .ts.ProfitInfo profitinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profitinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SalePrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .ts.ClientInfo client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client(), output);
  }

  // required .ts.ProductInfo product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->product(), output);
  }

  // optional .ts.PayInfo payinfo = 4;
  if (has_payinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->payinfo(), output);
  }

  // repeated .ts.ClientInfo client_list = 5;
  for (int i = 0; i < this->client_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->client_list(i), output);
  }

  // optional .ts.ProfitInfo profitinfo = 6;
  if (has_profitinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->profitinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SalePrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .ts.ClientInfo client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client(), target);
  }

  // required .ts.ProductInfo product = 3;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->product(), target);
  }

  // optional .ts.PayInfo payinfo = 4;
  if (has_payinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->payinfo(), target);
  }

  // repeated .ts.ClientInfo client_list = 5;
  for (int i = 0; i < this->client_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->client_list(i), target);
  }

  // optional .ts.ProfitInfo profitinfo = 6;
  if (has_profitinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->profitinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SalePrice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ts.ServiceHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .ts.ClientInfo client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client());
    }

    // required .ts.ProductInfo product = 3;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product());
    }

    // optional .ts.PayInfo payinfo = 4;
    if (has_payinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payinfo());
    }

    // optional .ts.ProfitInfo profitinfo = 6;
    if (has_profitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profitinfo());
    }

  }
  // repeated .ts.ClientInfo client_list = 5;
  total_size += 1 * this->client_list_size();
  for (int i = 0; i < this->client_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SalePrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SalePrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SalePrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SalePrice::MergeFrom(const SalePrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  client_list_.MergeFrom(from.client_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ts::ServiceHead::MergeFrom(from.head());
    }
    if (from.has_client()) {
      mutable_client()->::ts::ClientInfo::MergeFrom(from.client());
    }
    if (from.has_product()) {
      mutable_product()->::ts::ProductInfo::MergeFrom(from.product());
    }
    if (from.has_payinfo()) {
      mutable_payinfo()->::ts::PayInfo::MergeFrom(from.payinfo());
    }
    if (from.has_profitinfo()) {
      mutable_profitinfo()->::ts::ProfitInfo::MergeFrom(from.profitinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SalePrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalePrice::CopyFrom(const SalePrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalePrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_client()) {
    if (!this->client().IsInitialized()) return false;
  }
  if (has_product()) {
    if (!this->product().IsInitialized()) return false;
  }
  if (has_payinfo()) {
    if (!this->payinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < client_list_size(); i++) {
    if (!this->client_list(i).IsInitialized()) return false;
  }
  if (has_profitinfo()) {
    if (!this->profitinfo().IsInitialized()) return false;
  }
  return true;
}

void SalePrice::Swap(SalePrice* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(client_, other->client_);
    std::swap(product_, other->product_);
    std::swap(payinfo_, other->payinfo_);
    client_list_.Swap(&other->client_list_);
    std::swap(profitinfo_, other->profitinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SalePrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SalePrice_descriptor_;
  metadata.reflection = SalePrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SalePriceAns::kHeadFieldNumber;
const int SalePriceAns::kClientFieldNumber;
const int SalePriceAns::kProductFieldNumber;
const int SalePriceAns::kPayinfoFieldNumber;
const int SalePriceAns::kProfitinfoFieldNumber;
#endif  // !_MSC_VER

SalePriceAns::SalePriceAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SalePriceAns::InitAsDefaultInstance() {
  head_ = const_cast< ::ts::ServiceHead*>(&::ts::ServiceHead::default_instance());
  client_ = const_cast< ::ts::ClientInfo*>(&::ts::ClientInfo::default_instance());
  product_ = const_cast< ::ts::ProductInfo*>(&::ts::ProductInfo::default_instance());
  payinfo_ = const_cast< ::ts::PayInfo*>(&::ts::PayInfo::default_instance());
  profitinfo_ = const_cast< ::ts::ProfitInfo*>(&::ts::ProfitInfo::default_instance());
}

SalePriceAns::SalePriceAns(const SalePriceAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SalePriceAns::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  client_ = NULL;
  product_ = NULL;
  payinfo_ = NULL;
  profitinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SalePriceAns::~SalePriceAns() {
  SharedDtor();
}

void SalePriceAns::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete client_;
    delete product_;
    delete payinfo_;
    delete profitinfo_;
  }
}

void SalePriceAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SalePriceAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SalePriceAns_descriptor_;
}

const SalePriceAns& SalePriceAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_saleprice_2eproto();
  return *default_instance_;
}

SalePriceAns* SalePriceAns::default_instance_ = NULL;

SalePriceAns* SalePriceAns::New() const {
  return new SalePriceAns;
}

void SalePriceAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ts::ServiceHead::Clear();
    }
    if (has_client()) {
      if (client_ != NULL) client_->::ts::ClientInfo::Clear();
    }
    if (has_product()) {
      if (product_ != NULL) product_->::ts::ProductInfo::Clear();
    }
    if (has_payinfo()) {
      if (payinfo_ != NULL) payinfo_->::ts::PayInfo::Clear();
    }
    if (has_profitinfo()) {
      if (profitinfo_ != NULL) profitinfo_->::ts::ProfitInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SalePriceAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ts.ServiceHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // optional .ts.ClientInfo client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_product;
        break;
      }

      // optional .ts.ProductInfo product = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payinfo;
        break;
      }

      // optional .ts.PayInfo payinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_profitinfo;
        break;
      }

      // optional .ts.ProfitInfo profitinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profitinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SalePriceAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional .ts.ClientInfo client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client(), output);
  }

  // optional .ts.ProductInfo product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->product(), output);
  }

  // optional .ts.PayInfo payinfo = 4;
  if (has_payinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->payinfo(), output);
  }

  // optional .ts.ProfitInfo profitinfo = 5;
  if (has_profitinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->profitinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SalePriceAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional .ts.ClientInfo client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client(), target);
  }

  // optional .ts.ProductInfo product = 3;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->product(), target);
  }

  // optional .ts.PayInfo payinfo = 4;
  if (has_payinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->payinfo(), target);
  }

  // optional .ts.ProfitInfo profitinfo = 5;
  if (has_profitinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->profitinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SalePriceAns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ts.ServiceHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional .ts.ClientInfo client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client());
    }

    // optional .ts.ProductInfo product = 3;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product());
    }

    // optional .ts.PayInfo payinfo = 4;
    if (has_payinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payinfo());
    }

    // optional .ts.ProfitInfo profitinfo = 5;
    if (has_profitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profitinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SalePriceAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SalePriceAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SalePriceAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SalePriceAns::MergeFrom(const SalePriceAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ts::ServiceHead::MergeFrom(from.head());
    }
    if (from.has_client()) {
      mutable_client()->::ts::ClientInfo::MergeFrom(from.client());
    }
    if (from.has_product()) {
      mutable_product()->::ts::ProductInfo::MergeFrom(from.product());
    }
    if (from.has_payinfo()) {
      mutable_payinfo()->::ts::PayInfo::MergeFrom(from.payinfo());
    }
    if (from.has_profitinfo()) {
      mutable_profitinfo()->::ts::ProfitInfo::MergeFrom(from.profitinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SalePriceAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalePriceAns::CopyFrom(const SalePriceAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalePriceAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_client()) {
    if (!this->client().IsInitialized()) return false;
  }
  if (has_product()) {
    if (!this->product().IsInitialized()) return false;
  }
  if (has_payinfo()) {
    if (!this->payinfo().IsInitialized()) return false;
  }
  if (has_profitinfo()) {
    if (!this->profitinfo().IsInitialized()) return false;
  }
  return true;
}

void SalePriceAns::Swap(SalePriceAns* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(client_, other->client_);
    std::swap(product_, other->product_);
    std::swap(payinfo_, other->payinfo_);
    std::swap(profitinfo_, other->profitinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SalePriceAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SalePriceAns_descriptor_;
  metadata.reflection = SalePriceAns_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

// @@protoc_insertion_point(global_scope)

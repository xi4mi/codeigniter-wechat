// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: head.proto

#ifndef PROTOBUF_head_2eproto__INCLUDED
#define PROTOBUF_head_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ts {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_head_2eproto();
void protobuf_AssignDesc_head_2eproto();
void protobuf_ShutdownFile_head_2eproto();

class ServiceHead;

// ===================================================================

class ServiceHead : public ::google::protobuf::Message {
 public:
  ServiceHead();
  virtual ~ServiceHead();

  ServiceHead(const ServiceHead& from);

  inline ServiceHead& operator=(const ServiceHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceHead& default_instance();

  void Swap(ServiceHead* other);

  // implements Message ----------------------------------------------

  ServiceHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceHead& from);
  void MergeFrom(const ServiceHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string req = 1;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 1;
  inline const ::std::string& req() const;
  inline void set_req(const ::std::string& value);
  inline void set_req(const char* value);
  inline void set_req(const char* value, size_t size);
  inline ::std::string* mutable_req();
  inline ::std::string* release_req();
  inline void set_allocated_req(::std::string* req);

  // required string cmdcode = 2;
  inline bool has_cmdcode() const;
  inline void clear_cmdcode();
  static const int kCmdcodeFieldNumber = 2;
  inline const ::std::string& cmdcode() const;
  inline void set_cmdcode(const ::std::string& value);
  inline void set_cmdcode(const char* value);
  inline void set_cmdcode(const char* value, size_t size);
  inline ::std::string* mutable_cmdcode();
  inline ::std::string* release_cmdcode();
  inline void set_allocated_cmdcode(::std::string* cmdcode);

  // optional string subcmd = 3;
  inline bool has_subcmd() const;
  inline void clear_subcmd();
  static const int kSubcmdFieldNumber = 3;
  inline const ::std::string& subcmd() const;
  inline void set_subcmd(const ::std::string& value);
  inline void set_subcmd(const char* value);
  inline void set_subcmd(const char* value, size_t size);
  inline ::std::string* mutable_subcmd();
  inline ::std::string* release_subcmd();
  inline void set_allocated_subcmd(::std::string* subcmd);

  // optional string portalseq = 4;
  inline bool has_portalseq() const;
  inline void clear_portalseq();
  static const int kPortalseqFieldNumber = 4;
  inline const ::std::string& portalseq() const;
  inline void set_portalseq(const ::std::string& value);
  inline void set_portalseq(const char* value);
  inline void set_portalseq(const char* value, size_t size);
  inline ::std::string* mutable_portalseq();
  inline ::std::string* release_portalseq();
  inline void set_allocated_portalseq(::std::string* portalseq);

  // optional string trantime = 5;
  inline bool has_trantime() const;
  inline void clear_trantime();
  static const int kTrantimeFieldNumber = 5;
  inline const ::std::string& trantime() const;
  inline void set_trantime(const ::std::string& value);
  inline void set_trantime(const char* value);
  inline void set_trantime(const char* value, size_t size);
  inline ::std::string* mutable_trantime();
  inline ::std::string* release_trantime();
  inline void set_allocated_trantime(::std::string* trantime);

  // optional int32 resultcode = 6;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultcodeFieldNumber = 6;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // optional string resultinfo = 7;
  inline bool has_resultinfo() const;
  inline void clear_resultinfo();
  static const int kResultinfoFieldNumber = 7;
  inline const ::std::string& resultinfo() const;
  inline void set_resultinfo(const ::std::string& value);
  inline void set_resultinfo(const char* value);
  inline void set_resultinfo(const char* value, size_t size);
  inline ::std::string* mutable_resultinfo();
  inline ::std::string* release_resultinfo();
  inline void set_allocated_resultinfo(::std::string* resultinfo);

  // optional int32 errorcode = 8;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 8;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional string errinfo = 9;
  inline bool has_errinfo() const;
  inline void clear_errinfo();
  static const int kErrinfoFieldNumber = 9;
  inline const ::std::string& errinfo() const;
  inline void set_errinfo(const ::std::string& value);
  inline void set_errinfo(const char* value);
  inline void set_errinfo(const char* value, size_t size);
  inline ::std::string* mutable_errinfo();
  inline ::std::string* release_errinfo();
  inline void set_allocated_errinfo(::std::string* errinfo);

  // optional uint32 sessionid = 10;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 10;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ts.ServiceHead)
 private:
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_cmdcode();
  inline void clear_has_cmdcode();
  inline void set_has_subcmd();
  inline void clear_has_subcmd();
  inline void set_has_portalseq();
  inline void clear_has_portalseq();
  inline void set_has_trantime();
  inline void clear_has_trantime();
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_resultinfo();
  inline void clear_has_resultinfo();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errinfo();
  inline void clear_has_errinfo();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_;
  ::std::string* cmdcode_;
  ::std::string* subcmd_;
  ::std::string* portalseq_;
  ::std::string* trantime_;
  ::std::string* resultinfo_;
  ::google::protobuf::int32 resultcode_;
  ::google::protobuf::int32 errorcode_;
  ::std::string* errinfo_;
  ::google::protobuf::uint32 sessionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_head_2eproto();
  friend void protobuf_AssignDesc_head_2eproto();
  friend void protobuf_ShutdownFile_head_2eproto();

  void InitAsDefaultInstance();
  static ServiceHead* default_instance_;
};
// ===================================================================


// ===================================================================

// ServiceHead

// required string req = 1;
inline bool ServiceHead::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceHead::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceHead::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceHead::clear_req() {
  if (req_ != &::google::protobuf::internal::kEmptyString) {
    req_->clear();
  }
  clear_has_req();
}
inline const ::std::string& ServiceHead::req() const {
  return *req_;
}
inline void ServiceHead::set_req(const ::std::string& value) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  req_->assign(value);
}
inline void ServiceHead::set_req(const char* value) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  req_->assign(value);
}
inline void ServiceHead::set_req(const char* value, size_t size) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  req_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceHead::mutable_req() {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  return req_;
}
inline ::std::string* ServiceHead::release_req() {
  clear_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_;
    req_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceHead::set_allocated_req(::std::string* req) {
  if (req_ != &::google::protobuf::internal::kEmptyString) {
    delete req_;
  }
  if (req) {
    set_has_req();
    req_ = req;
  } else {
    clear_has_req();
    req_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cmdcode = 2;
inline bool ServiceHead::has_cmdcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceHead::set_has_cmdcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceHead::clear_has_cmdcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceHead::clear_cmdcode() {
  if (cmdcode_ != &::google::protobuf::internal::kEmptyString) {
    cmdcode_->clear();
  }
  clear_has_cmdcode();
}
inline const ::std::string& ServiceHead::cmdcode() const {
  return *cmdcode_;
}
inline void ServiceHead::set_cmdcode(const ::std::string& value) {
  set_has_cmdcode();
  if (cmdcode_ == &::google::protobuf::internal::kEmptyString) {
    cmdcode_ = new ::std::string;
  }
  cmdcode_->assign(value);
}
inline void ServiceHead::set_cmdcode(const char* value) {
  set_has_cmdcode();
  if (cmdcode_ == &::google::protobuf::internal::kEmptyString) {
    cmdcode_ = new ::std::string;
  }
  cmdcode_->assign(value);
}
inline void ServiceHead::set_cmdcode(const char* value, size_t size) {
  set_has_cmdcode();
  if (cmdcode_ == &::google::protobuf::internal::kEmptyString) {
    cmdcode_ = new ::std::string;
  }
  cmdcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceHead::mutable_cmdcode() {
  set_has_cmdcode();
  if (cmdcode_ == &::google::protobuf::internal::kEmptyString) {
    cmdcode_ = new ::std::string;
  }
  return cmdcode_;
}
inline ::std::string* ServiceHead::release_cmdcode() {
  clear_has_cmdcode();
  if (cmdcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmdcode_;
    cmdcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceHead::set_allocated_cmdcode(::std::string* cmdcode) {
  if (cmdcode_ != &::google::protobuf::internal::kEmptyString) {
    delete cmdcode_;
  }
  if (cmdcode) {
    set_has_cmdcode();
    cmdcode_ = cmdcode;
  } else {
    clear_has_cmdcode();
    cmdcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string subcmd = 3;
inline bool ServiceHead::has_subcmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceHead::set_has_subcmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceHead::clear_has_subcmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceHead::clear_subcmd() {
  if (subcmd_ != &::google::protobuf::internal::kEmptyString) {
    subcmd_->clear();
  }
  clear_has_subcmd();
}
inline const ::std::string& ServiceHead::subcmd() const {
  return *subcmd_;
}
inline void ServiceHead::set_subcmd(const ::std::string& value) {
  set_has_subcmd();
  if (subcmd_ == &::google::protobuf::internal::kEmptyString) {
    subcmd_ = new ::std::string;
  }
  subcmd_->assign(value);
}
inline void ServiceHead::set_subcmd(const char* value) {
  set_has_subcmd();
  if (subcmd_ == &::google::protobuf::internal::kEmptyString) {
    subcmd_ = new ::std::string;
  }
  subcmd_->assign(value);
}
inline void ServiceHead::set_subcmd(const char* value, size_t size) {
  set_has_subcmd();
  if (subcmd_ == &::google::protobuf::internal::kEmptyString) {
    subcmd_ = new ::std::string;
  }
  subcmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceHead::mutable_subcmd() {
  set_has_subcmd();
  if (subcmd_ == &::google::protobuf::internal::kEmptyString) {
    subcmd_ = new ::std::string;
  }
  return subcmd_;
}
inline ::std::string* ServiceHead::release_subcmd() {
  clear_has_subcmd();
  if (subcmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subcmd_;
    subcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceHead::set_allocated_subcmd(::std::string* subcmd) {
  if (subcmd_ != &::google::protobuf::internal::kEmptyString) {
    delete subcmd_;
  }
  if (subcmd) {
    set_has_subcmd();
    subcmd_ = subcmd;
  } else {
    clear_has_subcmd();
    subcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string portalseq = 4;
inline bool ServiceHead::has_portalseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceHead::set_has_portalseq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceHead::clear_has_portalseq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceHead::clear_portalseq() {
  if (portalseq_ != &::google::protobuf::internal::kEmptyString) {
    portalseq_->clear();
  }
  clear_has_portalseq();
}
inline const ::std::string& ServiceHead::portalseq() const {
  return *portalseq_;
}
inline void ServiceHead::set_portalseq(const ::std::string& value) {
  set_has_portalseq();
  if (portalseq_ == &::google::protobuf::internal::kEmptyString) {
    portalseq_ = new ::std::string;
  }
  portalseq_->assign(value);
}
inline void ServiceHead::set_portalseq(const char* value) {
  set_has_portalseq();
  if (portalseq_ == &::google::protobuf::internal::kEmptyString) {
    portalseq_ = new ::std::string;
  }
  portalseq_->assign(value);
}
inline void ServiceHead::set_portalseq(const char* value, size_t size) {
  set_has_portalseq();
  if (portalseq_ == &::google::protobuf::internal::kEmptyString) {
    portalseq_ = new ::std::string;
  }
  portalseq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceHead::mutable_portalseq() {
  set_has_portalseq();
  if (portalseq_ == &::google::protobuf::internal::kEmptyString) {
    portalseq_ = new ::std::string;
  }
  return portalseq_;
}
inline ::std::string* ServiceHead::release_portalseq() {
  clear_has_portalseq();
  if (portalseq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = portalseq_;
    portalseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceHead::set_allocated_portalseq(::std::string* portalseq) {
  if (portalseq_ != &::google::protobuf::internal::kEmptyString) {
    delete portalseq_;
  }
  if (portalseq) {
    set_has_portalseq();
    portalseq_ = portalseq;
  } else {
    clear_has_portalseq();
    portalseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trantime = 5;
inline bool ServiceHead::has_trantime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceHead::set_has_trantime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceHead::clear_has_trantime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceHead::clear_trantime() {
  if (trantime_ != &::google::protobuf::internal::kEmptyString) {
    trantime_->clear();
  }
  clear_has_trantime();
}
inline const ::std::string& ServiceHead::trantime() const {
  return *trantime_;
}
inline void ServiceHead::set_trantime(const ::std::string& value) {
  set_has_trantime();
  if (trantime_ == &::google::protobuf::internal::kEmptyString) {
    trantime_ = new ::std::string;
  }
  trantime_->assign(value);
}
inline void ServiceHead::set_trantime(const char* value) {
  set_has_trantime();
  if (trantime_ == &::google::protobuf::internal::kEmptyString) {
    trantime_ = new ::std::string;
  }
  trantime_->assign(value);
}
inline void ServiceHead::set_trantime(const char* value, size_t size) {
  set_has_trantime();
  if (trantime_ == &::google::protobuf::internal::kEmptyString) {
    trantime_ = new ::std::string;
  }
  trantime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceHead::mutable_trantime() {
  set_has_trantime();
  if (trantime_ == &::google::protobuf::internal::kEmptyString) {
    trantime_ = new ::std::string;
  }
  return trantime_;
}
inline ::std::string* ServiceHead::release_trantime() {
  clear_has_trantime();
  if (trantime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trantime_;
    trantime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceHead::set_allocated_trantime(::std::string* trantime) {
  if (trantime_ != &::google::protobuf::internal::kEmptyString) {
    delete trantime_;
  }
  if (trantime) {
    set_has_trantime();
    trantime_ = trantime;
  } else {
    clear_has_trantime();
    trantime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 resultcode = 6;
inline bool ServiceHead::has_resultcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceHead::set_has_resultcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceHead::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceHead::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ServiceHead::resultcode() const {
  return resultcode_;
}
inline void ServiceHead::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// optional string resultinfo = 7;
inline bool ServiceHead::has_resultinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceHead::set_has_resultinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceHead::clear_has_resultinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceHead::clear_resultinfo() {
  if (resultinfo_ != &::google::protobuf::internal::kEmptyString) {
    resultinfo_->clear();
  }
  clear_has_resultinfo();
}
inline const ::std::string& ServiceHead::resultinfo() const {
  return *resultinfo_;
}
inline void ServiceHead::set_resultinfo(const ::std::string& value) {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  resultinfo_->assign(value);
}
inline void ServiceHead::set_resultinfo(const char* value) {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  resultinfo_->assign(value);
}
inline void ServiceHead::set_resultinfo(const char* value, size_t size) {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  resultinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceHead::mutable_resultinfo() {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  return resultinfo_;
}
inline ::std::string* ServiceHead::release_resultinfo() {
  clear_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resultinfo_;
    resultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceHead::set_allocated_resultinfo(::std::string* resultinfo) {
  if (resultinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete resultinfo_;
  }
  if (resultinfo) {
    set_has_resultinfo();
    resultinfo_ = resultinfo;
  } else {
    clear_has_resultinfo();
    resultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 errorcode = 8;
inline bool ServiceHead::has_errorcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceHead::set_has_errorcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceHead::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceHead::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 ServiceHead::errorcode() const {
  return errorcode_;
}
inline void ServiceHead::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional string errinfo = 9;
inline bool ServiceHead::has_errinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceHead::set_has_errinfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServiceHead::clear_has_errinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServiceHead::clear_errinfo() {
  if (errinfo_ != &::google::protobuf::internal::kEmptyString) {
    errinfo_->clear();
  }
  clear_has_errinfo();
}
inline const ::std::string& ServiceHead::errinfo() const {
  return *errinfo_;
}
inline void ServiceHead::set_errinfo(const ::std::string& value) {
  set_has_errinfo();
  if (errinfo_ == &::google::protobuf::internal::kEmptyString) {
    errinfo_ = new ::std::string;
  }
  errinfo_->assign(value);
}
inline void ServiceHead::set_errinfo(const char* value) {
  set_has_errinfo();
  if (errinfo_ == &::google::protobuf::internal::kEmptyString) {
    errinfo_ = new ::std::string;
  }
  errinfo_->assign(value);
}
inline void ServiceHead::set_errinfo(const char* value, size_t size) {
  set_has_errinfo();
  if (errinfo_ == &::google::protobuf::internal::kEmptyString) {
    errinfo_ = new ::std::string;
  }
  errinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceHead::mutable_errinfo() {
  set_has_errinfo();
  if (errinfo_ == &::google::protobuf::internal::kEmptyString) {
    errinfo_ = new ::std::string;
  }
  return errinfo_;
}
inline ::std::string* ServiceHead::release_errinfo() {
  clear_has_errinfo();
  if (errinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errinfo_;
    errinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceHead::set_allocated_errinfo(::std::string* errinfo) {
  if (errinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete errinfo_;
  }
  if (errinfo) {
    set_has_errinfo();
    errinfo_ = errinfo;
  } else {
    clear_has_errinfo();
    errinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sessionid = 10;
inline bool ServiceHead::has_sessionid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServiceHead::set_has_sessionid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServiceHead::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServiceHead::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 ServiceHead::sessionid() const {
  return sessionid_;
}
inline void ServiceHead::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_head_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ts {

namespace {

const ::google::protobuf::Descriptor* PayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Price_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Price_reflection_ = NULL;
const ::google::protobuf::Descriptor* Profit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Profit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubAcctInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubAcctInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcctInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcctInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pay_2eproto() {
  protobuf_AddDesc_pay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pay.proto");
  GOOGLE_CHECK(file != NULL);
  PayInfo_descriptor_ = file->message_type(0);
  static const int PayInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, tranamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, remainamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, subcmd_),
  };
  PayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayInfo_descriptor_,
      PayInfo::default_instance_,
      PayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayInfo));
  Price_descriptor_ = file->message_type(1);
  static const int Price_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, dealer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, acctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, secretprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, profit_),
  };
  Price_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Price_descriptor_,
      Price::default_instance_,
      Price_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Price));
  Profit_descriptor_ = file->message_type(2);
  static const int Profit_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, dealer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, acctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, saleamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, shouldpay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, scrtprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, groupid_),
  };
  Profit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Profit_descriptor_,
      Profit::default_instance_,
      Profit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Profit));
  ProfitInfo_descriptor_ = file->message_type(3);
  static const int ProfitInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitInfo, srcamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitInfo, saleamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitInfo, totalprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitInfo, profitlist_),
  };
  ProfitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfitInfo_descriptor_,
      ProfitInfo::default_instance_,
      ProfitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfitInfo));
  SubAcctInfo_descriptor_ = file->message_type(4);
  static const int SubAcctInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAcctInfo, subacctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAcctInfo, amt_),
  };
  SubAcctInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubAcctInfo_descriptor_,
      SubAcctInfo::default_instance_,
      SubAcctInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAcctInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAcctInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubAcctInfo));
  AcctInfo_descriptor_ = file->message_type(5);
  static const int AcctInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctInfo, acctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctInfo, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctInfo, subacct_),
  };
  AcctInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcctInfo_descriptor_,
      AcctInfo::default_instance_,
      AcctInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcctInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayInfo_descriptor_, &PayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Price_descriptor_, &Price::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Profit_descriptor_, &Profit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfitInfo_descriptor_, &ProfitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubAcctInfo_descriptor_, &SubAcctInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcctInfo_descriptor_, &AcctInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pay_2eproto() {
  delete PayInfo::default_instance_;
  delete PayInfo_reflection_;
  delete Price::default_instance_;
  delete Price_reflection_;
  delete Profit::default_instance_;
  delete Profit_reflection_;
  delete ProfitInfo::default_instance_;
  delete ProfitInfo_reflection_;
  delete SubAcctInfo::default_instance_;
  delete SubAcctInfo_reflection_;
  delete AcctInfo::default_instance_;
  delete AcctInfo_reflection_;
}

void protobuf_AddDesc_pay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpay.proto\022\002ts\"o\n\007PayInfo\022\017\n\007paytype\030\001 "
    "\002(\005\022\017\n\007channel\030\002 \002(\005\022\017\n\007tranamt\030\003 \001(\003\022\021\n"
    "\tremainamt\030\004 \001(\003\022\016\n\006remark\030\005 \001(\t\022\016\n\006subc"
    "md\030\006 \001(\t\"z\n\005Price\022\016\n\006dealer\030\001 \002(\t\022\013\n\003amt"
    "\030\002 \002(\003\022\016\n\006acctid\030\003 \001(\t\022\017\n\007channel\030\004 \001(\003\022"
    "\023\n\013secretprice\030\005 \001(\003\022\016\n\006ruleid\030\006 \001(\t\022\016\n\006"
    "profit\030\007 \001(\003\"\237\001\n\006Profit\022\016\n\006dealer\030\001 \002(\t\022"
    "\016\n\006acctid\030\002 \002(\t\022\017\n\007saleamt\030\003 \001(\003\022\016\n\006prof"
    "it\030\004 \001(\003\022\021\n\tshouldpay\030\005 \001(\003\022\021\n\tscrtprice"
    "\030\006 \001(\005\022\016\n\006ruleid\030\007 \001(\t\022\r\n\005param\030\010 \001(\t\022\017\n"
    "\007groupid\030\t \001(\t\"u\n\nProfitInfo\022\021\n\tproducti"
    "d\030\001 \002(\t\022\016\n\006srcamt\030\002 \001(\003\022\017\n\007saleamt\030\003 \001(\003"
    "\022\023\n\013totalprofit\030\004 \001(\003\022\036\n\nprofitlist\030\005 \003("
    "\0132\n.ts.Profit\"-\n\013SubAcctInfo\022\021\n\tsubaccti"
    "d\030\001 \002(\t\022\013\n\003amt\030\002 \001(\003\"L\n\010AcctInfo\022\016\n\006acct"
    "id\030\001 \002(\t\022\016\n\006dealid\030\002 \002(\t\022 \n\007subacct\030\003 \003("
    "\0132\017.ts.SubAcctInfo", 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pay.proto", &protobuf_RegisterTypes);
  PayInfo::default_instance_ = new PayInfo();
  Price::default_instance_ = new Price();
  Profit::default_instance_ = new Profit();
  ProfitInfo::default_instance_ = new ProfitInfo();
  SubAcctInfo::default_instance_ = new SubAcctInfo();
  AcctInfo::default_instance_ = new AcctInfo();
  PayInfo::default_instance_->InitAsDefaultInstance();
  Price::default_instance_->InitAsDefaultInstance();
  Profit::default_instance_->InitAsDefaultInstance();
  ProfitInfo::default_instance_->InitAsDefaultInstance();
  SubAcctInfo::default_instance_->InitAsDefaultInstance();
  AcctInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pay_2eproto {
  StaticDescriptorInitializer_pay_2eproto() {
    protobuf_AddDesc_pay_2eproto();
  }
} static_descriptor_initializer_pay_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PayInfo::kPaytypeFieldNumber;
const int PayInfo::kChannelFieldNumber;
const int PayInfo::kTranamtFieldNumber;
const int PayInfo::kRemainamtFieldNumber;
const int PayInfo::kRemarkFieldNumber;
const int PayInfo::kSubcmdFieldNumber;
#endif  // !_MSC_VER

PayInfo::PayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayInfo::InitAsDefaultInstance() {
}

PayInfo::PayInfo(const PayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayInfo::SharedCtor() {
  _cached_size_ = 0;
  paytype_ = 0;
  channel_ = 0;
  tranamt_ = GOOGLE_LONGLONG(0);
  remainamt_ = GOOGLE_LONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayInfo::~PayInfo() {
  SharedDtor();
}

void PayInfo::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (subcmd_ != &::google::protobuf::internal::kEmptyString) {
    delete subcmd_;
  }
  if (this != default_instance_) {
  }
}

void PayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayInfo_descriptor_;
}

const PayInfo& PayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
  return *default_instance_;
}

PayInfo* PayInfo::default_instance_ = NULL;

PayInfo* PayInfo::New() const {
  return new PayInfo;
}

void PayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    paytype_ = 0;
    channel_ = 0;
    tranamt_ = GOOGLE_LONGLONG(0);
    remainamt_ = GOOGLE_LONGLONG(0);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
    if (has_subcmd()) {
      if (subcmd_ != &::google::protobuf::internal::kEmptyString) {
        subcmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 paytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // required int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tranamt;
        break;
      }

      // optional int64 tranamt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tranamt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tranamt_)));
          set_has_tranamt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remainamt;
        break;
      }

      // optional int64 remainamt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainamt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remainamt_)));
          set_has_remainamt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_remark;
        break;
      }

      // optional string remark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subcmd;
        break;
      }

      // optional string subcmd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subcmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subcmd().data(), this->subcmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 paytype = 1;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->paytype(), output);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int64 tranamt = 3;
  if (has_tranamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tranamt(), output);
  }

  // optional int64 remainamt = 4;
  if (has_remainamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->remainamt(), output);
  }

  // optional string remark = 5;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->remark(), output);
  }

  // optional string subcmd = 6;
  if (has_subcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcmd().data(), this->subcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->subcmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 paytype = 1;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->paytype(), target);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int64 tranamt = 3;
  if (has_tranamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tranamt(), target);
  }

  // optional int64 remainamt = 4;
  if (has_remainamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->remainamt(), target);
  }

  // optional string remark = 5;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->remark(), target);
  }

  // optional string subcmd = 6;
  if (has_subcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcmd().data(), this->subcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subcmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 paytype = 1;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

    // required int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int64 tranamt = 3;
    if (has_tranamt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tranamt());
    }

    // optional int64 remainamt = 4;
    if (has_remainamt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remainamt());
    }

    // optional string remark = 5;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional string subcmd = 6;
    if (has_subcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subcmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayInfo::MergeFrom(const PayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_tranamt()) {
      set_tranamt(from.tranamt());
    }
    if (from.has_remainamt()) {
      set_remainamt(from.remainamt());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_subcmd()) {
      set_subcmd(from.subcmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayInfo::CopyFrom(const PayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayInfo::Swap(PayInfo* other) {
  if (other != this) {
    std::swap(paytype_, other->paytype_);
    std::swap(channel_, other->channel_);
    std::swap(tranamt_, other->tranamt_);
    std::swap(remainamt_, other->remainamt_);
    std::swap(remark_, other->remark_);
    std::swap(subcmd_, other->subcmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayInfo_descriptor_;
  metadata.reflection = PayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Price::kDealerFieldNumber;
const int Price::kAmtFieldNumber;
const int Price::kAcctidFieldNumber;
const int Price::kChannelFieldNumber;
const int Price::kSecretpriceFieldNumber;
const int Price::kRuleidFieldNumber;
const int Price::kProfitFieldNumber;
#endif  // !_MSC_VER

Price::Price()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Price::InitAsDefaultInstance() {
}

Price::Price(const Price& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Price::SharedCtor() {
  _cached_size_ = 0;
  dealer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amt_ = GOOGLE_LONGLONG(0);
  acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = GOOGLE_LONGLONG(0);
  secretprice_ = GOOGLE_LONGLONG(0);
  ruleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profit_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Price::~Price() {
  SharedDtor();
}

void Price::SharedDtor() {
  if (dealer_ != &::google::protobuf::internal::kEmptyString) {
    delete dealer_;
  }
  if (acctid_ != &::google::protobuf::internal::kEmptyString) {
    delete acctid_;
  }
  if (ruleid_ != &::google::protobuf::internal::kEmptyString) {
    delete ruleid_;
  }
  if (this != default_instance_) {
  }
}

void Price::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Price::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Price_descriptor_;
}

const Price& Price::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
  return *default_instance_;
}

Price* Price::default_instance_ = NULL;

Price* Price::New() const {
  return new Price;
}

void Price::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dealer()) {
      if (dealer_ != &::google::protobuf::internal::kEmptyString) {
        dealer_->clear();
      }
    }
    amt_ = GOOGLE_LONGLONG(0);
    if (has_acctid()) {
      if (acctid_ != &::google::protobuf::internal::kEmptyString) {
        acctid_->clear();
      }
    }
    channel_ = GOOGLE_LONGLONG(0);
    secretprice_ = GOOGLE_LONGLONG(0);
    if (has_ruleid()) {
      if (ruleid_ != &::google::protobuf::internal::kEmptyString) {
        ruleid_->clear();
      }
    }
    profit_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dealer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dealer().data(), this->dealer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amt;
        break;
      }

      // required int64 amt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acctid;
        break;
      }

      // optional string acctid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acctid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acctid().data(), this->acctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional int64 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_secretprice;
        break;
      }

      // optional int64 secretprice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secretprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secretprice_)));
          set_has_secretprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ruleid;
        break;
      }

      // optional string ruleid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ruleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ruleid().data(), this->ruleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_profit;
        break;
      }

      // optional int64 profit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dealer = 1;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dealer(), output);
  }

  // required int64 amt = 2;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amt(), output);
  }

  // optional string acctid = 3;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->acctid(), output);
  }

  // optional int64 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->channel(), output);
  }

  // optional int64 secretprice = 5;
  if (has_secretprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->secretprice(), output);
  }

  // optional string ruleid = 6;
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruleid().data(), this->ruleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ruleid(), output);
  }

  // optional int64 profit = 7;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->profit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Price::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dealer = 1;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dealer(), target);
  }

  // required int64 amt = 2;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amt(), target);
  }

  // optional string acctid = 3;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->acctid(), target);
  }

  // optional int64 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->channel(), target);
  }

  // optional int64 secretprice = 5;
  if (has_secretprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->secretprice(), target);
  }

  // optional string ruleid = 6;
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruleid().data(), this->ruleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ruleid(), target);
  }

  // optional int64 profit = 7;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->profit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Price::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dealer = 1;
    if (has_dealer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealer());
    }

    // required int64 amt = 2;
    if (has_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amt());
    }

    // optional string acctid = 3;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acctid());
    }

    // optional int64 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->channel());
    }

    // optional int64 secretprice = 5;
    if (has_secretprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secretprice());
    }

    // optional string ruleid = 6;
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ruleid());
    }

    // optional int64 profit = 7;
    if (has_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Price::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Price* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Price*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Price::MergeFrom(const Price& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealer()) {
      set_dealer(from.dealer());
    }
    if (from.has_amt()) {
      set_amt(from.amt());
    }
    if (from.has_acctid()) {
      set_acctid(from.acctid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_secretprice()) {
      set_secretprice(from.secretprice());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Price::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Price::CopyFrom(const Price& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Price::Swap(Price* other) {
  if (other != this) {
    std::swap(dealer_, other->dealer_);
    std::swap(amt_, other->amt_);
    std::swap(acctid_, other->acctid_);
    std::swap(channel_, other->channel_);
    std::swap(secretprice_, other->secretprice_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(profit_, other->profit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Price::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Price_descriptor_;
  metadata.reflection = Price_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Profit::kDealerFieldNumber;
const int Profit::kAcctidFieldNumber;
const int Profit::kSaleamtFieldNumber;
const int Profit::kProfitFieldNumber;
const int Profit::kShouldpayFieldNumber;
const int Profit::kScrtpriceFieldNumber;
const int Profit::kRuleidFieldNumber;
const int Profit::kParamFieldNumber;
const int Profit::kGroupidFieldNumber;
#endif  // !_MSC_VER

Profit::Profit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Profit::InitAsDefaultInstance() {
}

Profit::Profit(const Profit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Profit::SharedCtor() {
  _cached_size_ = 0;
  dealer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  saleamt_ = GOOGLE_LONGLONG(0);
  profit_ = GOOGLE_LONGLONG(0);
  shouldpay_ = GOOGLE_LONGLONG(0);
  scrtprice_ = 0;
  ruleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Profit::~Profit() {
  SharedDtor();
}

void Profit::SharedDtor() {
  if (dealer_ != &::google::protobuf::internal::kEmptyString) {
    delete dealer_;
  }
  if (acctid_ != &::google::protobuf::internal::kEmptyString) {
    delete acctid_;
  }
  if (ruleid_ != &::google::protobuf::internal::kEmptyString) {
    delete ruleid_;
  }
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void Profit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profit_descriptor_;
}

const Profit& Profit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
  return *default_instance_;
}

Profit* Profit::default_instance_ = NULL;

Profit* Profit::New() const {
  return new Profit;
}

void Profit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dealer()) {
      if (dealer_ != &::google::protobuf::internal::kEmptyString) {
        dealer_->clear();
      }
    }
    if (has_acctid()) {
      if (acctid_ != &::google::protobuf::internal::kEmptyString) {
        acctid_->clear();
      }
    }
    saleamt_ = GOOGLE_LONGLONG(0);
    profit_ = GOOGLE_LONGLONG(0);
    shouldpay_ = GOOGLE_LONGLONG(0);
    scrtprice_ = 0;
    if (has_ruleid()) {
      if (ruleid_ != &::google::protobuf::internal::kEmptyString) {
        ruleid_->clear();
      }
    }
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Profit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dealer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dealer().data(), this->dealer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acctid;
        break;
      }

      // required string acctid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acctid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acctid().data(), this->acctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_saleamt;
        break;
      }

      // optional int64 saleamt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saleamt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &saleamt_)));
          set_has_saleamt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profit;
        break;
      }

      // optional int64 profit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shouldpay;
        break;
      }

      // optional int64 shouldpay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shouldpay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shouldpay_)));
          set_has_shouldpay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scrtprice;
        break;
      }

      // optional int32 scrtprice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrtprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrtprice_)));
          set_has_scrtprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ruleid;
        break;
      }

      // optional string ruleid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ruleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ruleid().data(), this->ruleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_param;
        break;
      }

      // optional string param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_groupid;
        break;
      }

      // optional string groupid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Profit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dealer = 1;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dealer(), output);
  }

  // required string acctid = 2;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acctid(), output);
  }

  // optional int64 saleamt = 3;
  if (has_saleamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->saleamt(), output);
  }

  // optional int64 profit = 4;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->profit(), output);
  }

  // optional int64 shouldpay = 5;
  if (has_shouldpay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->shouldpay(), output);
  }

  // optional int32 scrtprice = 6;
  if (has_scrtprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->scrtprice(), output);
  }

  // optional string ruleid = 7;
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruleid().data(), this->ruleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ruleid(), output);
  }

  // optional string param = 8;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->param(), output);
  }

  // optional string groupid = 9;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Profit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dealer = 1;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dealer(), target);
  }

  // required string acctid = 2;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acctid(), target);
  }

  // optional int64 saleamt = 3;
  if (has_saleamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->saleamt(), target);
  }

  // optional int64 profit = 4;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->profit(), target);
  }

  // optional int64 shouldpay = 5;
  if (has_shouldpay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->shouldpay(), target);
  }

  // optional int32 scrtprice = 6;
  if (has_scrtprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->scrtprice(), target);
  }

  // optional string ruleid = 7;
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruleid().data(), this->ruleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ruleid(), target);
  }

  // optional string param = 8;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->param(), target);
  }

  // optional string groupid = 9;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Profit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dealer = 1;
    if (has_dealer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealer());
    }

    // required string acctid = 2;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acctid());
    }

    // optional int64 saleamt = 3;
    if (has_saleamt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->saleamt());
    }

    // optional int64 profit = 4;
    if (has_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profit());
    }

    // optional int64 shouldpay = 5;
    if (has_shouldpay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shouldpay());
    }

    // optional int32 scrtprice = 6;
    if (has_scrtprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scrtprice());
    }

    // optional string ruleid = 7;
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ruleid());
    }

    // optional string param = 8;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string groupid = 9;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Profit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Profit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Profit::MergeFrom(const Profit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealer()) {
      set_dealer(from.dealer());
    }
    if (from.has_acctid()) {
      set_acctid(from.acctid());
    }
    if (from.has_saleamt()) {
      set_saleamt(from.saleamt());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_shouldpay()) {
      set_shouldpay(from.shouldpay());
    }
    if (from.has_scrtprice()) {
      set_scrtprice(from.scrtprice());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Profit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profit::CopyFrom(const Profit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Profit::Swap(Profit* other) {
  if (other != this) {
    std::swap(dealer_, other->dealer_);
    std::swap(acctid_, other->acctid_);
    std::swap(saleamt_, other->saleamt_);
    std::swap(profit_, other->profit_);
    std::swap(shouldpay_, other->shouldpay_);
    std::swap(scrtprice_, other->scrtprice_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(param_, other->param_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Profit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Profit_descriptor_;
  metadata.reflection = Profit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfitInfo::kProductidFieldNumber;
const int ProfitInfo::kSrcamtFieldNumber;
const int ProfitInfo::kSaleamtFieldNumber;
const int ProfitInfo::kTotalprofitFieldNumber;
const int ProfitInfo::kProfitlistFieldNumber;
#endif  // !_MSC_VER

ProfitInfo::ProfitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfitInfo::InitAsDefaultInstance() {
}

ProfitInfo::ProfitInfo(const ProfitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfitInfo::SharedCtor() {
  _cached_size_ = 0;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcamt_ = GOOGLE_LONGLONG(0);
  saleamt_ = GOOGLE_LONGLONG(0);
  totalprofit_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfitInfo::~ProfitInfo() {
  SharedDtor();
}

void ProfitInfo::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (this != default_instance_) {
  }
}

void ProfitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfitInfo_descriptor_;
}

const ProfitInfo& ProfitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
  return *default_instance_;
}

ProfitInfo* ProfitInfo::default_instance_ = NULL;

ProfitInfo* ProfitInfo::New() const {
  return new ProfitInfo;
}

void ProfitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    srcamt_ = GOOGLE_LONGLONG(0);
    saleamt_ = GOOGLE_LONGLONG(0);
    totalprofit_ = GOOGLE_LONGLONG(0);
  }
  profitlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string productid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcamt;
        break;
      }

      // optional int64 srcamt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcamt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcamt_)));
          set_has_srcamt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_saleamt;
        break;
      }

      // optional int64 saleamt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saleamt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &saleamt_)));
          set_has_saleamt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalprofit;
        break;
      }

      // optional int64 totalprofit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalprofit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalprofit_)));
          set_has_totalprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_profitlist;
        break;
      }

      // repeated .ts.Profit profitlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profitlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profitlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_profitlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string productid = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->productid(), output);
  }

  // optional int64 srcamt = 2;
  if (has_srcamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->srcamt(), output);
  }

  // optional int64 saleamt = 3;
  if (has_saleamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->saleamt(), output);
  }

  // optional int64 totalprofit = 4;
  if (has_totalprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->totalprofit(), output);
  }

  // repeated .ts.Profit profitlist = 5;
  for (int i = 0; i < this->profitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->profitlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string productid = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // optional int64 srcamt = 2;
  if (has_srcamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->srcamt(), target);
  }

  // optional int64 saleamt = 3;
  if (has_saleamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->saleamt(), target);
  }

  // optional int64 totalprofit = 4;
  if (has_totalprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->totalprofit(), target);
  }

  // repeated .ts.Profit profitlist = 5;
  for (int i = 0; i < this->profitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->profitlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string productid = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional int64 srcamt = 2;
    if (has_srcamt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcamt());
    }

    // optional int64 saleamt = 3;
    if (has_saleamt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->saleamt());
    }

    // optional int64 totalprofit = 4;
    if (has_totalprofit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalprofit());
    }

  }
  // repeated .ts.Profit profitlist = 5;
  total_size += 1 * this->profitlist_size();
  for (int i = 0; i < this->profitlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->profitlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfitInfo::MergeFrom(const ProfitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  profitlist_.MergeFrom(from.profitlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_srcamt()) {
      set_srcamt(from.srcamt());
    }
    if (from.has_saleamt()) {
      set_saleamt(from.saleamt());
    }
    if (from.has_totalprofit()) {
      set_totalprofit(from.totalprofit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfitInfo::CopyFrom(const ProfitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < profitlist_size(); i++) {
    if (!this->profitlist(i).IsInitialized()) return false;
  }
  return true;
}

void ProfitInfo::Swap(ProfitInfo* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(srcamt_, other->srcamt_);
    std::swap(saleamt_, other->saleamt_);
    std::swap(totalprofit_, other->totalprofit_);
    profitlist_.Swap(&other->profitlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfitInfo_descriptor_;
  metadata.reflection = ProfitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubAcctInfo::kSubacctidFieldNumber;
const int SubAcctInfo::kAmtFieldNumber;
#endif  // !_MSC_VER

SubAcctInfo::SubAcctInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubAcctInfo::InitAsDefaultInstance() {
}

SubAcctInfo::SubAcctInfo(const SubAcctInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubAcctInfo::SharedCtor() {
  _cached_size_ = 0;
  subacctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amt_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubAcctInfo::~SubAcctInfo() {
  SharedDtor();
}

void SubAcctInfo::SharedDtor() {
  if (subacctid_ != &::google::protobuf::internal::kEmptyString) {
    delete subacctid_;
  }
  if (this != default_instance_) {
  }
}

void SubAcctInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubAcctInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubAcctInfo_descriptor_;
}

const SubAcctInfo& SubAcctInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
  return *default_instance_;
}

SubAcctInfo* SubAcctInfo::default_instance_ = NULL;

SubAcctInfo* SubAcctInfo::New() const {
  return new SubAcctInfo;
}

void SubAcctInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_subacctid()) {
      if (subacctid_ != &::google::protobuf::internal::kEmptyString) {
        subacctid_->clear();
      }
    }
    amt_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubAcctInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subacctid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subacctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subacctid().data(), this->subacctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amt;
        break;
      }

      // optional int64 amt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubAcctInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string subacctid = 1;
  if (has_subacctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subacctid().data(), this->subacctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subacctid(), output);
  }

  // optional int64 amt = 2;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubAcctInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string subacctid = 1;
  if (has_subacctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subacctid().data(), this->subacctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subacctid(), target);
  }

  // optional int64 amt = 2;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubAcctInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string subacctid = 1;
    if (has_subacctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subacctid());
    }

    // optional int64 amt = 2;
    if (has_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubAcctInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubAcctInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubAcctInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubAcctInfo::MergeFrom(const SubAcctInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subacctid()) {
      set_subacctid(from.subacctid());
    }
    if (from.has_amt()) {
      set_amt(from.amt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubAcctInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubAcctInfo::CopyFrom(const SubAcctInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubAcctInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubAcctInfo::Swap(SubAcctInfo* other) {
  if (other != this) {
    std::swap(subacctid_, other->subacctid_);
    std::swap(amt_, other->amt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubAcctInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubAcctInfo_descriptor_;
  metadata.reflection = SubAcctInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcctInfo::kAcctidFieldNumber;
const int AcctInfo::kDealidFieldNumber;
const int AcctInfo::kSubacctFieldNumber;
#endif  // !_MSC_VER

AcctInfo::AcctInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcctInfo::InitAsDefaultInstance() {
}

AcctInfo::AcctInfo(const AcctInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcctInfo::SharedCtor() {
  _cached_size_ = 0;
  acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dealid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcctInfo::~AcctInfo() {
  SharedDtor();
}

void AcctInfo::SharedDtor() {
  if (acctid_ != &::google::protobuf::internal::kEmptyString) {
    delete acctid_;
  }
  if (dealid_ != &::google::protobuf::internal::kEmptyString) {
    delete dealid_;
  }
  if (this != default_instance_) {
  }
}

void AcctInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcctInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcctInfo_descriptor_;
}

const AcctInfo& AcctInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
  return *default_instance_;
}

AcctInfo* AcctInfo::default_instance_ = NULL;

AcctInfo* AcctInfo::New() const {
  return new AcctInfo;
}

void AcctInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acctid()) {
      if (acctid_ != &::google::protobuf::internal::kEmptyString) {
        acctid_->clear();
      }
    }
    if (has_dealid()) {
      if (dealid_ != &::google::protobuf::internal::kEmptyString) {
        dealid_->clear();
      }
    }
  }
  subacct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcctInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acctid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acctid().data(), this->acctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dealid;
        break;
      }

      // required string dealid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dealid().data(), this->dealid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subacct;
        break;
      }

      // repeated .ts.SubAcctInfo subacct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subacct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subacct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subacct;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcctInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string acctid = 1;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acctid(), output);
  }

  // required string dealid = 2;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dealid(), output);
  }

  // repeated .ts.SubAcctInfo subacct = 3;
  for (int i = 0; i < this->subacct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subacct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcctInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string acctid = 1;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acctid(), target);
  }

  // required string dealid = 2;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dealid(), target);
  }

  // repeated .ts.SubAcctInfo subacct = 3;
  for (int i = 0; i < this->subacct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subacct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcctInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acctid = 1;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acctid());
    }

    // required string dealid = 2;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealid());
    }

  }
  // repeated .ts.SubAcctInfo subacct = 3;
  total_size += 1 * this->subacct_size();
  for (int i = 0; i < this->subacct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subacct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcctInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcctInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcctInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcctInfo::MergeFrom(const AcctInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subacct_.MergeFrom(from.subacct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acctid()) {
      set_acctid(from.acctid());
    }
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcctInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcctInfo::CopyFrom(const AcctInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcctInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < subacct_size(); i++) {
    if (!this->subacct(i).IsInitialized()) return false;
  }
  return true;
}

void AcctInfo::Swap(AcctInfo* other) {
  if (other != this) {
    std::swap(acctid_, other->acctid_);
    std::swap(dealid_, other->dealid_);
    subacct_.Swap(&other->subacct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcctInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcctInfo_descriptor_;
  metadata.reflection = AcctInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

// @@protoc_insertion_point(global_scope)

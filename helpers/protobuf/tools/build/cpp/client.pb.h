// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ts {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class ClientInfo;
class ClientList;

// ===================================================================

class ClientInfo : public ::google::protobuf::Message {
 public:
  ClientInfo();
  virtual ~ClientInfo();

  ClientInfo(const ClientInfo& from);

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientInfo& default_instance();

  void Swap(ClientInfo* other);

  // implements Message ----------------------------------------------

  ClientInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientid = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // optional string acctid = 2;
  inline bool has_acctid() const;
  inline void clear_acctid();
  static const int kAcctidFieldNumber = 2;
  inline const ::std::string& acctid() const;
  inline void set_acctid(const ::std::string& value);
  inline void set_acctid(const char* value);
  inline void set_acctid(const char* value, size_t size);
  inline ::std::string* mutable_acctid();
  inline ::std::string* release_acctid();
  inline void set_allocated_acctid(::std::string* acctid);

  // optional string fatherid = 3;
  inline bool has_fatherid() const;
  inline void clear_fatherid();
  static const int kFatheridFieldNumber = 3;
  inline const ::std::string& fatherid() const;
  inline void set_fatherid(const ::std::string& value);
  inline void set_fatherid(const char* value);
  inline void set_fatherid(const char* value, size_t size);
  inline ::std::string* mutable_fatherid();
  inline ::std::string* release_fatherid();
  inline void set_allocated_fatherid(::std::string* fatherid);

  // optional string topid = 4;
  inline bool has_topid() const;
  inline void clear_topid();
  static const int kTopidFieldNumber = 4;
  inline const ::std::string& topid() const;
  inline void set_topid(const ::std::string& value);
  inline void set_topid(const char* value);
  inline void set_topid(const char* value, size_t size);
  inline ::std::string* mutable_topid();
  inline ::std::string* release_topid();
  inline void set_allocated_topid(::std::string* topid);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string group = 6;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 6;
  inline const ::std::string& group() const;
  inline void set_group(const ::std::string& value);
  inline void set_group(const char* value);
  inline void set_group(const char* value, size_t size);
  inline ::std::string* mutable_group();
  inline ::std::string* release_group();
  inline void set_allocated_group(::std::string* group);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ts.ClientInfo)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_acctid();
  inline void clear_has_acctid();
  inline void set_has_fatherid();
  inline void clear_has_fatherid();
  inline void set_has_topid();
  inline void clear_has_topid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientid_;
  ::std::string* acctid_;
  ::std::string* fatherid_;
  ::std::string* topid_;
  ::std::string* group_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static ClientInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientList : public ::google::protobuf::Message {
 public:
  ClientList();
  virtual ~ClientList();

  ClientList(const ClientList& from);

  inline ClientList& operator=(const ClientList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientList& default_instance();

  void Swap(ClientList* other);

  // implements Message ----------------------------------------------

  ClientList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientList& from);
  void MergeFrom(const ClientList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated .ts.ClientInfo client = 2;
  inline int client_size() const;
  inline void clear_client();
  static const int kClientFieldNumber = 2;
  inline const ::ts::ClientInfo& client(int index) const;
  inline ::ts::ClientInfo* mutable_client(int index);
  inline ::ts::ClientInfo* add_client();
  inline const ::google::protobuf::RepeatedPtrField< ::ts::ClientInfo >&
      client() const;
  inline ::google::protobuf::RepeatedPtrField< ::ts::ClientInfo >*
      mutable_client();

  // @@protoc_insertion_point(class_scope:ts.ClientList)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ts::ClientInfo > client_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static ClientList* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientInfo

// required string clientid = 1;
inline bool ClientInfo::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientInfo::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientInfo::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientInfo::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& ClientInfo::clientid() const {
  return *clientid_;
}
inline void ClientInfo::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void ClientInfo::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void ClientInfo::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientInfo::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  return clientid_;
}
inline ::std::string* ClientInfo::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientInfo::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string acctid = 2;
inline bool ClientInfo::has_acctid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientInfo::set_has_acctid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientInfo::clear_has_acctid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientInfo::clear_acctid() {
  if (acctid_ != &::google::protobuf::internal::kEmptyString) {
    acctid_->clear();
  }
  clear_has_acctid();
}
inline const ::std::string& ClientInfo::acctid() const {
  return *acctid_;
}
inline void ClientInfo::set_acctid(const ::std::string& value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::kEmptyString) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
}
inline void ClientInfo::set_acctid(const char* value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::kEmptyString) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
}
inline void ClientInfo::set_acctid(const char* value, size_t size) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::kEmptyString) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientInfo::mutable_acctid() {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::kEmptyString) {
    acctid_ = new ::std::string;
  }
  return acctid_;
}
inline ::std::string* ClientInfo::release_acctid() {
  clear_has_acctid();
  if (acctid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = acctid_;
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientInfo::set_allocated_acctid(::std::string* acctid) {
  if (acctid_ != &::google::protobuf::internal::kEmptyString) {
    delete acctid_;
  }
  if (acctid) {
    set_has_acctid();
    acctid_ = acctid;
  } else {
    clear_has_acctid();
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fatherid = 3;
inline bool ClientInfo::has_fatherid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientInfo::set_has_fatherid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientInfo::clear_has_fatherid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientInfo::clear_fatherid() {
  if (fatherid_ != &::google::protobuf::internal::kEmptyString) {
    fatherid_->clear();
  }
  clear_has_fatherid();
}
inline const ::std::string& ClientInfo::fatherid() const {
  return *fatherid_;
}
inline void ClientInfo::set_fatherid(const ::std::string& value) {
  set_has_fatherid();
  if (fatherid_ == &::google::protobuf::internal::kEmptyString) {
    fatherid_ = new ::std::string;
  }
  fatherid_->assign(value);
}
inline void ClientInfo::set_fatherid(const char* value) {
  set_has_fatherid();
  if (fatherid_ == &::google::protobuf::internal::kEmptyString) {
    fatherid_ = new ::std::string;
  }
  fatherid_->assign(value);
}
inline void ClientInfo::set_fatherid(const char* value, size_t size) {
  set_has_fatherid();
  if (fatherid_ == &::google::protobuf::internal::kEmptyString) {
    fatherid_ = new ::std::string;
  }
  fatherid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientInfo::mutable_fatherid() {
  set_has_fatherid();
  if (fatherid_ == &::google::protobuf::internal::kEmptyString) {
    fatherid_ = new ::std::string;
  }
  return fatherid_;
}
inline ::std::string* ClientInfo::release_fatherid() {
  clear_has_fatherid();
  if (fatherid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fatherid_;
    fatherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientInfo::set_allocated_fatherid(::std::string* fatherid) {
  if (fatherid_ != &::google::protobuf::internal::kEmptyString) {
    delete fatherid_;
  }
  if (fatherid) {
    set_has_fatherid();
    fatherid_ = fatherid;
  } else {
    clear_has_fatherid();
    fatherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string topid = 4;
inline bool ClientInfo::has_topid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientInfo::set_has_topid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientInfo::clear_has_topid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientInfo::clear_topid() {
  if (topid_ != &::google::protobuf::internal::kEmptyString) {
    topid_->clear();
  }
  clear_has_topid();
}
inline const ::std::string& ClientInfo::topid() const {
  return *topid_;
}
inline void ClientInfo::set_topid(const ::std::string& value) {
  set_has_topid();
  if (topid_ == &::google::protobuf::internal::kEmptyString) {
    topid_ = new ::std::string;
  }
  topid_->assign(value);
}
inline void ClientInfo::set_topid(const char* value) {
  set_has_topid();
  if (topid_ == &::google::protobuf::internal::kEmptyString) {
    topid_ = new ::std::string;
  }
  topid_->assign(value);
}
inline void ClientInfo::set_topid(const char* value, size_t size) {
  set_has_topid();
  if (topid_ == &::google::protobuf::internal::kEmptyString) {
    topid_ = new ::std::string;
  }
  topid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientInfo::mutable_topid() {
  set_has_topid();
  if (topid_ == &::google::protobuf::internal::kEmptyString) {
    topid_ = new ::std::string;
  }
  return topid_;
}
inline ::std::string* ClientInfo::release_topid() {
  clear_has_topid();
  if (topid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topid_;
    topid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientInfo::set_allocated_topid(::std::string* topid) {
  if (topid_ != &::google::protobuf::internal::kEmptyString) {
    delete topid_;
  }
  if (topid) {
    set_has_topid();
    topid_ = topid;
  } else {
    clear_has_topid();
    topid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 status = 5;
inline bool ClientInfo::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientInfo::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ClientInfo::status() const {
  return status_;
}
inline void ClientInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string group = 6;
inline bool ClientInfo::has_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientInfo::set_has_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientInfo::clear_has_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientInfo::clear_group() {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    group_->clear();
  }
  clear_has_group();
}
inline const ::std::string& ClientInfo::group() const {
  return *group_;
}
inline void ClientInfo::set_group(const ::std::string& value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void ClientInfo::set_group(const char* value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void ClientInfo::set_group(const char* value, size_t size) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientInfo::mutable_group() {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  return group_;
}
inline ::std::string* ClientInfo::release_group() {
  clear_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_;
    group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientInfo::set_allocated_group(::std::string* group) {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    delete group_;
  }
  if (group) {
    set_has_group();
    group_ = group;
  } else {
    clear_has_group();
    group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 7;
inline bool ClientInfo::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientInfo::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ClientInfo::level() const {
  return level_;
}
inline void ClientInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// ClientList

// required int32 num = 1;
inline bool ClientList::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientList::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientList::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientList::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ClientList::num() const {
  return num_;
}
inline void ClientList::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// repeated .ts.ClientInfo client = 2;
inline int ClientList::client_size() const {
  return client_.size();
}
inline void ClientList::clear_client() {
  client_.Clear();
}
inline const ::ts::ClientInfo& ClientList::client(int index) const {
  return client_.Get(index);
}
inline ::ts::ClientInfo* ClientList::mutable_client(int index) {
  return client_.Mutable(index);
}
inline ::ts::ClientInfo* ClientList::add_client() {
  return client_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ts::ClientInfo >&
ClientList::client() const {
  return client_;
}
inline ::google::protobuf::RepeatedPtrField< ::ts::ClientInfo >*
ClientList::mutable_client() {
  return &client_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED

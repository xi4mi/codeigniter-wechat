// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pproxy.proto

#ifndef PROTOBUF_pproxy_2eproto__INCLUDED
#define PROTOBUF_pproxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "head.pb.h"
#include "product.pb.h"
#include "client.pb.h"
// @@protoc_insertion_point(includes)

namespace ts {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pproxy_2eproto();
void protobuf_AssignDesc_pproxy_2eproto();
void protobuf_ShutdownFile_pproxy_2eproto();

class Provide;
class ProvideAns;

// ===================================================================

class Provide : public ::google::protobuf::Message {
 public:
  Provide();
  virtual ~Provide();

  Provide(const Provide& from);

  inline Provide& operator=(const Provide& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Provide& default_instance();

  void Swap(Provide* other);

  // implements Message ----------------------------------------------

  Provide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Provide& from);
  void MergeFrom(const Provide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ts.ServiceHead head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::ts::ServiceHead& head() const;
  inline ::ts::ServiceHead* mutable_head();
  inline ::ts::ServiceHead* release_head();
  inline void set_allocated_head(::ts::ServiceHead* head);

  // required .ts.ProductInfo product = 2;
  inline bool has_product() const;
  inline void clear_product();
  static const int kProductFieldNumber = 2;
  inline const ::ts::ProductInfo& product() const;
  inline ::ts::ProductInfo* mutable_product();
  inline ::ts::ProductInfo* release_product();
  inline void set_allocated_product(::ts::ProductInfo* product);

  // optional .ts.ClientInfo client = 3;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 3;
  inline const ::ts::ClientInfo& client() const;
  inline ::ts::ClientInfo* mutable_client();
  inline ::ts::ClientInfo* release_client();
  inline void set_allocated_client(::ts::ClientInfo* client);

  // @@protoc_insertion_point(class_scope:ts.Provide)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_product();
  inline void clear_has_product();
  inline void set_has_client();
  inline void clear_has_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ts::ServiceHead* head_;
  ::ts::ProductInfo* product_;
  ::ts::ClientInfo* client_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pproxy_2eproto();
  friend void protobuf_AssignDesc_pproxy_2eproto();
  friend void protobuf_ShutdownFile_pproxy_2eproto();

  void InitAsDefaultInstance();
  static Provide* default_instance_;
};
// -------------------------------------------------------------------

class ProvideAns : public ::google::protobuf::Message {
 public:
  ProvideAns();
  virtual ~ProvideAns();

  ProvideAns(const ProvideAns& from);

  inline ProvideAns& operator=(const ProvideAns& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProvideAns& default_instance();

  void Swap(ProvideAns* other);

  // implements Message ----------------------------------------------

  ProvideAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProvideAns& from);
  void MergeFrom(const ProvideAns& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ts.ServiceHead head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::ts::ServiceHead& head() const;
  inline ::ts::ServiceHead* mutable_head();
  inline ::ts::ServiceHead* release_head();
  inline void set_allocated_head(::ts::ServiceHead* head);

  // optional .ts.ProductInfo product = 2;
  inline bool has_product() const;
  inline void clear_product();
  static const int kProductFieldNumber = 2;
  inline const ::ts::ProductInfo& product() const;
  inline ::ts::ProductInfo* mutable_product();
  inline ::ts::ProductInfo* release_product();
  inline void set_allocated_product(::ts::ProductInfo* product);

  // optional .ts.ClientInfo client = 3;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 3;
  inline const ::ts::ClientInfo& client() const;
  inline ::ts::ClientInfo* mutable_client();
  inline ::ts::ClientInfo* release_client();
  inline void set_allocated_client(::ts::ClientInfo* client);

  // @@protoc_insertion_point(class_scope:ts.ProvideAns)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_product();
  inline void clear_has_product();
  inline void set_has_client();
  inline void clear_has_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ts::ServiceHead* head_;
  ::ts::ProductInfo* product_;
  ::ts::ClientInfo* client_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pproxy_2eproto();
  friend void protobuf_AssignDesc_pproxy_2eproto();
  friend void protobuf_ShutdownFile_pproxy_2eproto();

  void InitAsDefaultInstance();
  static ProvideAns* default_instance_;
};
// ===================================================================


// ===================================================================

// Provide

// required .ts.ServiceHead head = 1;
inline bool Provide::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Provide::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Provide::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Provide::clear_head() {
  if (head_ != NULL) head_->::ts::ServiceHead::Clear();
  clear_has_head();
}
inline const ::ts::ServiceHead& Provide::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ts::ServiceHead* Provide::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::ts::ServiceHead;
  return head_;
}
inline ::ts::ServiceHead* Provide::release_head() {
  clear_has_head();
  ::ts::ServiceHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Provide::set_allocated_head(::ts::ServiceHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// required .ts.ProductInfo product = 2;
inline bool Provide::has_product() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Provide::set_has_product() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Provide::clear_has_product() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Provide::clear_product() {
  if (product_ != NULL) product_->::ts::ProductInfo::Clear();
  clear_has_product();
}
inline const ::ts::ProductInfo& Provide::product() const {
  return product_ != NULL ? *product_ : *default_instance_->product_;
}
inline ::ts::ProductInfo* Provide::mutable_product() {
  set_has_product();
  if (product_ == NULL) product_ = new ::ts::ProductInfo;
  return product_;
}
inline ::ts::ProductInfo* Provide::release_product() {
  clear_has_product();
  ::ts::ProductInfo* temp = product_;
  product_ = NULL;
  return temp;
}
inline void Provide::set_allocated_product(::ts::ProductInfo* product) {
  delete product_;
  product_ = product;
  if (product) {
    set_has_product();
  } else {
    clear_has_product();
  }
}

// optional .ts.ClientInfo client = 3;
inline bool Provide::has_client() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Provide::set_has_client() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Provide::clear_has_client() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Provide::clear_client() {
  if (client_ != NULL) client_->::ts::ClientInfo::Clear();
  clear_has_client();
}
inline const ::ts::ClientInfo& Provide::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::ts::ClientInfo* Provide::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::ts::ClientInfo;
  return client_;
}
inline ::ts::ClientInfo* Provide::release_client() {
  clear_has_client();
  ::ts::ClientInfo* temp = client_;
  client_ = NULL;
  return temp;
}
inline void Provide::set_allocated_client(::ts::ClientInfo* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
}

// -------------------------------------------------------------------

// ProvideAns

// required .ts.ServiceHead head = 1;
inline bool ProvideAns::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProvideAns::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProvideAns::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProvideAns::clear_head() {
  if (head_ != NULL) head_->::ts::ServiceHead::Clear();
  clear_has_head();
}
inline const ::ts::ServiceHead& ProvideAns::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ts::ServiceHead* ProvideAns::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::ts::ServiceHead;
  return head_;
}
inline ::ts::ServiceHead* ProvideAns::release_head() {
  clear_has_head();
  ::ts::ServiceHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void ProvideAns::set_allocated_head(::ts::ServiceHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional .ts.ProductInfo product = 2;
inline bool ProvideAns::has_product() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProvideAns::set_has_product() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProvideAns::clear_has_product() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProvideAns::clear_product() {
  if (product_ != NULL) product_->::ts::ProductInfo::Clear();
  clear_has_product();
}
inline const ::ts::ProductInfo& ProvideAns::product() const {
  return product_ != NULL ? *product_ : *default_instance_->product_;
}
inline ::ts::ProductInfo* ProvideAns::mutable_product() {
  set_has_product();
  if (product_ == NULL) product_ = new ::ts::ProductInfo;
  return product_;
}
inline ::ts::ProductInfo* ProvideAns::release_product() {
  clear_has_product();
  ::ts::ProductInfo* temp = product_;
  product_ = NULL;
  return temp;
}
inline void ProvideAns::set_allocated_product(::ts::ProductInfo* product) {
  delete product_;
  product_ = product;
  if (product) {
    set_has_product();
  } else {
    clear_has_product();
  }
}

// optional .ts.ClientInfo client = 3;
inline bool ProvideAns::has_client() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProvideAns::set_has_client() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProvideAns::clear_has_client() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProvideAns::clear_client() {
  if (client_ != NULL) client_->::ts::ClientInfo::Clear();
  clear_has_client();
}
inline const ::ts::ClientInfo& ProvideAns::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::ts::ClientInfo* ProvideAns::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::ts::ClientInfo;
  return client_;
}
inline ::ts::ClientInfo* ProvideAns::release_client() {
  clear_has_client();
  ::ts::ClientInfo* temp = client_;
  client_ = NULL;
  return temp;
}
inline void ProvideAns::set_allocated_client(::ts::ClientInfo* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pproxy_2eproto__INCLUDED

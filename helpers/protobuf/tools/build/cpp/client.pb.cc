// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ts {

namespace {

const ::google::protobuf::Descriptor* ClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  ClientInfo_descriptor_ = file->message_type(0);
  static const int ClientInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, acctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, fatherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, topid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, level_),
  };
  ClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientInfo_descriptor_,
      ClientInfo::default_instance_,
      ClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientInfo));
  ClientList_descriptor_ = file->message_type(1);
  static const int ClientList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientList, client_),
  };
  ClientList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientList_descriptor_,
      ClientList::default_instance_,
      ClientList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientInfo_descriptor_, &ClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientList_descriptor_, &ClientList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete ClientInfo::default_instance_;
  delete ClientInfo_reflection_;
  delete ClientList::default_instance_;
  delete ClientList_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\002ts\"}\n\nClientInfo\022\020\n\010clie"
    "ntid\030\001 \002(\t\022\016\n\006acctid\030\002 \001(\t\022\020\n\010fatherid\030\003"
    " \001(\t\022\r\n\005topid\030\004 \001(\t\022\016\n\006status\030\005 \001(\005\022\r\n\005g"
    "roup\030\006 \001(\t\022\r\n\005level\030\007 \001(\005\"9\n\nClientList\022"
    "\013\n\003num\030\001 \002(\005\022\036\n\006client\030\002 \003(\0132\016.ts.Client"
    "Info", 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  ClientInfo::default_instance_ = new ClientInfo();
  ClientList::default_instance_ = new ClientList();
  ClientInfo::default_instance_->InitAsDefaultInstance();
  ClientList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientInfo::kClientidFieldNumber;
const int ClientInfo::kAcctidFieldNumber;
const int ClientInfo::kFatheridFieldNumber;
const int ClientInfo::kTopidFieldNumber;
const int ClientInfo::kStatusFieldNumber;
const int ClientInfo::kGroupFieldNumber;
const int ClientInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

ClientInfo::ClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientInfo::InitAsDefaultInstance() {
}

ClientInfo::ClientInfo(const ClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientInfo::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fatherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  topid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientInfo::~ClientInfo() {
  SharedDtor();
}

void ClientInfo::SharedDtor() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (acctid_ != &::google::protobuf::internal::kEmptyString) {
    delete acctid_;
  }
  if (fatherid_ != &::google::protobuf::internal::kEmptyString) {
    delete fatherid_;
  }
  if (topid_ != &::google::protobuf::internal::kEmptyString) {
    delete topid_;
  }
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    delete group_;
  }
  if (this != default_instance_) {
  }
}

void ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInfo_descriptor_;
}

const ClientInfo& ClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

ClientInfo* ClientInfo::default_instance_ = NULL;

ClientInfo* ClientInfo::New() const {
  return new ClientInfo;
}

void ClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    if (has_acctid()) {
      if (acctid_ != &::google::protobuf::internal::kEmptyString) {
        acctid_->clear();
      }
    }
    if (has_fatherid()) {
      if (fatherid_ != &::google::protobuf::internal::kEmptyString) {
        fatherid_->clear();
      }
    }
    if (has_topid()) {
      if (topid_ != &::google::protobuf::internal::kEmptyString) {
        topid_->clear();
      }
    }
    status_ = 0;
    if (has_group()) {
      if (group_ != &::google::protobuf::internal::kEmptyString) {
        group_->clear();
      }
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acctid;
        break;
      }

      // optional string acctid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acctid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acctid().data(), this->acctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fatherid;
        break;
      }

      // optional string fatherid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fatherid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fatherid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fatherid().data(), this->fatherid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topid;
        break;
      }

      // optional string topid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topid().data(), this->topid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_group;
        break;
      }

      // optional string group = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientid(), output);
  }

  // optional string acctid = 2;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acctid(), output);
  }

  // optional string fatherid = 3;
  if (has_fatherid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fatherid().data(), this->fatherid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fatherid(), output);
  }

  // optional string topid = 4;
  if (has_topid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topid().data(), this->topid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topid(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional string group = 6;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->group(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // optional string acctid = 2;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acctid(), target);
  }

  // optional string fatherid = 3;
  if (has_fatherid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fatherid().data(), this->fatherid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fatherid(), target);
  }

  // optional string topid = 4;
  if (has_topid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topid().data(), this->topid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topid(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional string group = 6;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string acctid = 2;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acctid());
    }

    // optional string fatherid = 3;
    if (has_fatherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fatherid());
    }

    // optional string topid = 4;
    if (has_topid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topid());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string group = 6;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_acctid()) {
      set_acctid(from.acctid());
    }
    if (from.has_fatherid()) {
      set_fatherid(from.fatherid());
    }
    if (from.has_topid()) {
      set_topid(from.topid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientInfo::Swap(ClientInfo* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(acctid_, other->acctid_);
    std::swap(fatherid_, other->fatherid_);
    std::swap(topid_, other->topid_);
    std::swap(status_, other->status_);
    std::swap(group_, other->group_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientInfo_descriptor_;
  metadata.reflection = ClientInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientList::kNumFieldNumber;
const int ClientList::kClientFieldNumber;
#endif  // !_MSC_VER

ClientList::ClientList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientList::InitAsDefaultInstance() {
}

ClientList::ClientList(const ClientList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientList::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientList::~ClientList() {
  SharedDtor();
}

void ClientList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientList_descriptor_;
}

const ClientList& ClientList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

ClientList* ClientList::default_instance_ = NULL;

ClientList* ClientList::New() const {
  return new ClientList;
}

void ClientList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  client_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // repeated .ts.ClientInfo client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // repeated .ts.ClientInfo client = 2;
  for (int i = 0; i < this->client_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // repeated .ts.ClientInfo client = 2;
  for (int i = 0; i < this->client_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated .ts.ClientInfo client = 2;
  total_size += 1 * this->client_size();
  for (int i = 0; i < this->client_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientList::MergeFrom(const ClientList& from) {
  GOOGLE_CHECK_NE(&from, this);
  client_.MergeFrom(from.client_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientList::CopyFrom(const ClientList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < client_size(); i++) {
    if (!this->client(i).IsInitialized()) return false;
  }
  return true;
}

void ClientList::Swap(ClientList* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    client_.Swap(&other->client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientList_descriptor_;
  metadata.reflection = ClientList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

// @@protoc_insertion_point(global_scope)

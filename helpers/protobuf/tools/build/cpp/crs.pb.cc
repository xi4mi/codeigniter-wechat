// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "crs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ts {

namespace {

const ::google::protobuf::Descriptor* GetCRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCRSAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCRSAns_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_crs_2eproto() {
  protobuf_AddDesc_crs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "crs.proto");
  GOOGLE_CHECK(file != NULL);
  GetCRS_descriptor_ = file->message_type(0);
  static const int GetCRS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRS, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRS, clientinfo_),
  };
  GetCRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCRS_descriptor_,
      GetCRS::default_instance_,
      GetCRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCRS));
  GetCRSAns_descriptor_ = file->message_type(1);
  static const int GetCRSAns_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRSAns, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRSAns, client_list_),
  };
  GetCRSAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCRSAns_descriptor_,
      GetCRSAns::default_instance_,
      GetCRSAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRSAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCRSAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCRSAns));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_crs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCRS_descriptor_, &GetCRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCRSAns_descriptor_, &GetCRSAns::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_crs_2eproto() {
  delete GetCRS::default_instance_;
  delete GetCRS_reflection_;
  delete GetCRSAns::default_instance_;
  delete GetCRSAns_reflection_;
}

void protobuf_AddDesc_crs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ts::protobuf_AddDesc_head_2eproto();
  ::ts::protobuf_AddDesc_client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tcrs.proto\022\002ts\032\nhead.proto\032\014client.prot"
    "o\"K\n\006GetCRS\022\035\n\004head\030\001 \002(\0132\017.ts.ServiceHe"
    "ad\022\"\n\nclientinfo\030\002 \002(\0132\016.ts.ClientInfo\"O"
    "\n\tGetCRSAns\022\035\n\004head\030\001 \002(\0132\017.ts.ServiceHe"
    "ad\022#\n\013client_list\030\002 \003(\0132\016.ts.ClientInfo", 199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "crs.proto", &protobuf_RegisterTypes);
  GetCRS::default_instance_ = new GetCRS();
  GetCRSAns::default_instance_ = new GetCRSAns();
  GetCRS::default_instance_->InitAsDefaultInstance();
  GetCRSAns::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_crs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_crs_2eproto {
  StaticDescriptorInitializer_crs_2eproto() {
    protobuf_AddDesc_crs_2eproto();
  }
} static_descriptor_initializer_crs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetCRS::kHeadFieldNumber;
const int GetCRS::kClientinfoFieldNumber;
#endif  // !_MSC_VER

GetCRS::GetCRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCRS::InitAsDefaultInstance() {
  head_ = const_cast< ::ts::ServiceHead*>(&::ts::ServiceHead::default_instance());
  clientinfo_ = const_cast< ::ts::ClientInfo*>(&::ts::ClientInfo::default_instance());
}

GetCRS::GetCRS(const GetCRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCRS::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  clientinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCRS::~GetCRS() {
  SharedDtor();
}

void GetCRS::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete clientinfo_;
  }
}

void GetCRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCRS_descriptor_;
}

const GetCRS& GetCRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crs_2eproto();
  return *default_instance_;
}

GetCRS* GetCRS::default_instance_ = NULL;

GetCRS* GetCRS::New() const {
  return new GetCRS;
}

void GetCRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ts::ServiceHead::Clear();
    }
    if (has_clientinfo()) {
      if (clientinfo_ != NULL) clientinfo_->::ts::ClientInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ts.ServiceHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientinfo;
        break;
      }

      // required .ts.ClientInfo clientinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .ts.ClientInfo clientinfo = 2;
  if (has_clientinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clientinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .ts.ClientInfo clientinfo = 2;
  if (has_clientinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clientinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCRS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ts.ServiceHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .ts.ClientInfo clientinfo = 2;
    if (has_clientinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCRS::MergeFrom(const GetCRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ts::ServiceHead::MergeFrom(from.head());
    }
    if (from.has_clientinfo()) {
      mutable_clientinfo()->::ts::ClientInfo::MergeFrom(from.clientinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCRS::CopyFrom(const GetCRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCRS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_clientinfo()) {
    if (!this->clientinfo().IsInitialized()) return false;
  }
  return true;
}

void GetCRS::Swap(GetCRS* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(clientinfo_, other->clientinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCRS_descriptor_;
  metadata.reflection = GetCRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCRSAns::kHeadFieldNumber;
const int GetCRSAns::kClientListFieldNumber;
#endif  // !_MSC_VER

GetCRSAns::GetCRSAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCRSAns::InitAsDefaultInstance() {
  head_ = const_cast< ::ts::ServiceHead*>(&::ts::ServiceHead::default_instance());
}

GetCRSAns::GetCRSAns(const GetCRSAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCRSAns::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCRSAns::~GetCRSAns() {
  SharedDtor();
}

void GetCRSAns::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void GetCRSAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCRSAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCRSAns_descriptor_;
}

const GetCRSAns& GetCRSAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crs_2eproto();
  return *default_instance_;
}

GetCRSAns* GetCRSAns::default_instance_ = NULL;

GetCRSAns* GetCRSAns::New() const {
  return new GetCRSAns;
}

void GetCRSAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ts::ServiceHead::Clear();
    }
  }
  client_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCRSAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ts.ServiceHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_list;
        break;
      }

      // repeated .ts.ClientInfo client_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCRSAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // repeated .ts.ClientInfo client_list = 2;
  for (int i = 0; i < this->client_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCRSAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // repeated .ts.ClientInfo client_list = 2;
  for (int i = 0; i < this->client_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCRSAns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ts.ServiceHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated .ts.ClientInfo client_list = 2;
  total_size += 1 * this->client_list_size();
  for (int i = 0; i < this->client_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCRSAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCRSAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCRSAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCRSAns::MergeFrom(const GetCRSAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  client_list_.MergeFrom(from.client_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ts::ServiceHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCRSAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCRSAns::CopyFrom(const GetCRSAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCRSAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  for (int i = 0; i < client_list_size(); i++) {
    if (!this->client_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetCRSAns::Swap(GetCRSAns* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    client_list_.Swap(&other->client_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCRSAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCRSAns_descriptor_;
  metadata.reflection = GetCRSAns_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_svr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_svr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ts {

namespace {

const ::google::protobuf::Descriptor* ClientReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientAns_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5fsvr_2eproto() {
  protobuf_AddDesc_client_5fsvr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_svr.proto");
  GOOGLE_CHECK(file != NULL);
  ClientReq_descriptor_ = file->message_type(0);
  static const int ClientReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReq, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReq, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReq, topclientid_),
  };
  ClientReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReq_descriptor_,
      ClientReq::default_instance_,
      ClientReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReq));
  ClientAns_descriptor_ = file->message_type(1);
  static const int ClientAns_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAns, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAns, clientlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAns, strclientlist_),
  };
  ClientAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientAns_descriptor_,
      ClientAns::default_instance_,
      ClientAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientAns));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5fsvr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReq_descriptor_, &ClientReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientAns_descriptor_, &ClientAns::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5fsvr_2eproto() {
  delete ClientReq::default_instance_;
  delete ClientReq_reflection_;
  delete ClientAns::default_instance_;
  delete ClientAns_reflection_;
}

void protobuf_AddDesc_client_5fsvr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ts::protobuf_AddDesc_head_2eproto();
  ::ts::protobuf_AddDesc_client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020client_svr.proto\022\002ts\032\nhead.proto\032\014clie"
    "nt.proto\"_\n\tClientReq\022\035\n\004head\030\001 \002(\0132\017.ts"
    ".ServiceHead\022\036\n\006client\030\002 \002(\0132\016.ts.Client"
    "Info\022\023\n\013topclientid\030\003 \001(\t\"e\n\tClientAns\022\035"
    "\n\004head\030\001 \002(\0132\017.ts.ServiceHead\022\"\n\nclientL"
    "ist\030\002 \001(\0132\016.ts.ClientList\022\025\n\rstrclientli"
    "st\030\003 \001(\t", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_svr.proto", &protobuf_RegisterTypes);
  ClientReq::default_instance_ = new ClientReq();
  ClientAns::default_instance_ = new ClientAns();
  ClientReq::default_instance_->InitAsDefaultInstance();
  ClientAns::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fsvr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fsvr_2eproto {
  StaticDescriptorInitializer_client_5fsvr_2eproto() {
    protobuf_AddDesc_client_5fsvr_2eproto();
  }
} static_descriptor_initializer_client_5fsvr_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientReq::kHeadFieldNumber;
const int ClientReq::kClientFieldNumber;
const int ClientReq::kTopclientidFieldNumber;
#endif  // !_MSC_VER

ClientReq::ClientReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReq::InitAsDefaultInstance() {
  head_ = const_cast< ::ts::ServiceHead*>(&::ts::ServiceHead::default_instance());
  client_ = const_cast< ::ts::ClientInfo*>(&::ts::ClientInfo::default_instance());
}

ClientReq::ClientReq(const ClientReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReq::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  client_ = NULL;
  topclientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReq::~ClientReq() {
  SharedDtor();
}

void ClientReq::SharedDtor() {
  if (topclientid_ != &::google::protobuf::internal::kEmptyString) {
    delete topclientid_;
  }
  if (this != default_instance_) {
    delete head_;
    delete client_;
  }
}

void ClientReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReq_descriptor_;
}

const ClientReq& ClientReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fsvr_2eproto();
  return *default_instance_;
}

ClientReq* ClientReq::default_instance_ = NULL;

ClientReq* ClientReq::New() const {
  return new ClientReq;
}

void ClientReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ts::ServiceHead::Clear();
    }
    if (has_client()) {
      if (client_ != NULL) client_->::ts::ClientInfo::Clear();
    }
    if (has_topclientid()) {
      if (topclientid_ != &::google::protobuf::internal::kEmptyString) {
        topclientid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ts.ServiceHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // required .ts.ClientInfo client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topclientid;
        break;
      }

      // optional string topclientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topclientid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topclientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topclientid().data(), this->topclientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .ts.ClientInfo client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client(), output);
  }

  // optional string topclientid = 3;
  if (has_topclientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topclientid().data(), this->topclientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topclientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .ts.ClientInfo client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client(), target);
  }

  // optional string topclientid = 3;
  if (has_topclientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topclientid().data(), this->topclientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topclientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ts.ServiceHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .ts.ClientInfo client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client());
    }

    // optional string topclientid = 3;
    if (has_topclientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topclientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReq::MergeFrom(const ClientReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ts::ServiceHead::MergeFrom(from.head());
    }
    if (from.has_client()) {
      mutable_client()->::ts::ClientInfo::MergeFrom(from.client());
    }
    if (from.has_topclientid()) {
      set_topclientid(from.topclientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReq::CopyFrom(const ClientReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_client()) {
    if (!this->client().IsInitialized()) return false;
  }
  return true;
}

void ClientReq::Swap(ClientReq* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(client_, other->client_);
    std::swap(topclientid_, other->topclientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReq_descriptor_;
  metadata.reflection = ClientReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientAns::kHeadFieldNumber;
const int ClientAns::kClientListFieldNumber;
const int ClientAns::kStrclientlistFieldNumber;
#endif  // !_MSC_VER

ClientAns::ClientAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientAns::InitAsDefaultInstance() {
  head_ = const_cast< ::ts::ServiceHead*>(&::ts::ServiceHead::default_instance());
  clientlist_ = const_cast< ::ts::ClientList*>(&::ts::ClientList::default_instance());
}

ClientAns::ClientAns(const ClientAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientAns::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  clientlist_ = NULL;
  strclientlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientAns::~ClientAns() {
  SharedDtor();
}

void ClientAns::SharedDtor() {
  if (strclientlist_ != &::google::protobuf::internal::kEmptyString) {
    delete strclientlist_;
  }
  if (this != default_instance_) {
    delete head_;
    delete clientlist_;
  }
}

void ClientAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAns_descriptor_;
}

const ClientAns& ClientAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fsvr_2eproto();
  return *default_instance_;
}

ClientAns* ClientAns::default_instance_ = NULL;

ClientAns* ClientAns::New() const {
  return new ClientAns;
}

void ClientAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ts::ServiceHead::Clear();
    }
    if (has_clientlist()) {
      if (clientlist_ != NULL) clientlist_->::ts::ClientList::Clear();
    }
    if (has_strclientlist()) {
      if (strclientlist_ != &::google::protobuf::internal::kEmptyString) {
        strclientlist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ts.ServiceHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientList;
        break;
      }

      // optional .ts.ClientList clientList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strclientlist;
        break;
      }

      // optional string strclientlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strclientlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strclientlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strclientlist().data(), this->strclientlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional .ts.ClientList clientList = 2;
  if (has_clientlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clientlist(), output);
  }

  // optional string strclientlist = 3;
  if (has_strclientlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strclientlist().data(), this->strclientlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strclientlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ts.ServiceHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional .ts.ClientList clientList = 2;
  if (has_clientlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clientlist(), target);
  }

  // optional string strclientlist = 3;
  if (has_strclientlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strclientlist().data(), this->strclientlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strclientlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientAns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ts.ServiceHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional .ts.ClientList clientList = 2;
    if (has_clientlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientlist());
    }

    // optional string strclientlist = 3;
    if (has_strclientlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strclientlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientAns::MergeFrom(const ClientAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ts::ServiceHead::MergeFrom(from.head());
    }
    if (from.has_clientlist()) {
      mutable_clientlist()->::ts::ClientList::MergeFrom(from.clientlist());
    }
    if (from.has_strclientlist()) {
      set_strclientlist(from.strclientlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAns::CopyFrom(const ClientAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_clientlist()) {
    if (!this->clientlist().IsInitialized()) return false;
  }
  return true;
}

void ClientAns::Swap(ClientAns* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(clientlist_, other->clientlist_);
    std::swap(strclientlist_, other->strclientlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientAns_descriptor_;
  metadata.reflection = ClientAns_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts

// @@protoc_insertion_point(global_scope)
